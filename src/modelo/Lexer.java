package modelo;

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\2\0\1\6\2\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\1\0\1\15\1\16\1\17\5\20"+
    "\3\21\1\0\1\22\1\23\1\24\1\25\2\0\1\26"+
    "\1\27\1\30\1\31\1\32\11\26\1\33\1\34\3\26"+
    "\1\35\4\26\1\36\1\26\1\37\1\0\1\37\1\0"+
    "\1\26\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\26\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\26\1\70\1\71\1\72\7\0"+
    "\1\3\73\0\1\26\7\0\1\26\3\0\1\26\3\0"+
    "\1\26\1\0\1\26\6\0\1\26\1\0\1\26\4\0"+
    "\1\26\7\0\1\26\3\0\1\26\3\0\1\26\1\0"+
    "\1\26\6\0\1\26\1\0\1\26\u012b\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\2\1\1\1\3\1\4"+
    "\1\5\1\6\1\7\2\10\1\11\1\7\1\12\1\7"+
    "\30\13\1\14\1\15\3\0\1\2\1\0\2\16\47\0"+
    "\1\17\11\0\1\20\12\0\1\21\1\22\33\0\1\23"+
    "\3\0\1\24\53\0\1\25\12\0\1\26\11\0\1\27"+
    "\42\0\1\2\16\0\1\30\11\0\1\31\13\0\1\32"+
    "\4\0\1\32\11\0\1\33\1\0\1\32\4\0\1\26"+
    "\3\0\1\34\4\0\1\35\21\0\1\36\17\0\1\37"+
    "\15\0\1\40\3\0\1\25\1\0\1\41\16\0\1\26"+
    "\2\0\1\42\1\17\44\0\1\43\3\0\6\44\26\0"+
    "\1\45\1\0\1\32\20\0\1\46\1\47\1\50\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\73\0\166\0\261\0\73\0\73"+
    "\0\73\0\73\0\354\0\u0127\0\u0162\0\73\0\u019d\0\73"+
    "\0\73\0\73\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\73\0\73\0\u024e\0\u0725\0\u0760\0\u079b\0\u07d6"+
    "\0\73\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\73\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u054d\0\73\0\73"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\73\0\u1be3\0\u1c1e\0\u1c59\0\73"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\73\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\73\0\u28cb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\73\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18"+
    "\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0"+
    "\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u191f\0\u32b4\0\u32ef\0\u332a\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\u3578\0\u35b3\0\73\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\73\0\u3801\0\u383c\0\u3877"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\73\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\73"+
    "\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61"+
    "\0\u3f9c\0\u3fd7\0\73\0\u4012\0\u404d\0\u4088\0\u40c3\0\73"+
    "\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b"+
    "\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473"+
    "\0\u44ae\0\73\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610"+
    "\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8"+
    "\0\u4823\0\73\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985"+
    "\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\73"+
    "\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\73\0\u4c84\0\u4cbf"+
    "\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97"+
    "\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\73"+
    "\0\73\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759"+
    "\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\73\0\u58bb\0\u58f6"+
    "\0\u5931\0\73\0\u024e\0\u0d5e\0\u23f4\0\u38b2\0\u485e\0\u596c"+
    "\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44"+
    "\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c"+
    "\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\73\0\u5e7e\0\u191f"+
    "\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056"+
    "\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e"+
    "\0\73\0\73\0\73\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355"+
    "\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\2\1\13\1\14\3\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\22\1\24\1\22"+
    "\1\25\3\22\1\21\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\22\1\34\1\35\1\22\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\22\1\47"+
    "\1\50\1\51\1\22\1\52\1\7\1\53\33\4\1\54"+
    "\41\4\1\3\30\4\1\54\55\4\4\55\4\4\11\55"+
    "\1\4\30\55\1\4\1\55\13\4\1\56\2\4\1\57"+
    "\5\4\1\60\7\4\1\54\55\4\1\61\3\62\11\4"+
    "\1\54\55\4\4\15\11\4\1\54\54\4\1\63\15\4"+
    "\1\54\4\4\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\4\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\4\1\103\1\104\1\105\1\106\1\107"+
    "\40\4\1\54\24\4\1\110\135\4\1\111\2\4\1\54"+
    "\72\4\1\54\5\4\1\112\1\113\7\4\1\114\3\4"+
    "\1\115\1\4\1\116\45\4\1\54\4\4\1\117\5\4"+
    "\1\120\1\4\1\121\1\4\1\122\2\4\1\123\50\4"+
    "\1\54\10\4\1\124\2\4\1\125\2\4\1\126\2\4"+
    "\1\127\50\4\1\54\4\4\1\130\7\4\1\131\4\4"+
    "\1\132\50\4\1\54\16\4\1\133\53\4\1\54\21\4"+
    "\1\134\2\4\1\135\45\4\1\54\10\4\1\136\1\4"+
    "\1\137\11\4\1\140\1\141\1\142\43\4\1\54\7\4"+
    "\1\143\1\4\1\144\13\4\1\145\44\4\1\54\4\4"+
    "\1\146\7\4\1\147\55\4\1\54\4\4\1\150\3\4"+
    "\1\151\16\4\1\152\42\4\1\54\4\4\1\153\14\4"+
    "\1\154\5\4\1\155\42\4\1\54\16\4\1\156\25\4"+
    "\1\157\25\4\1\54\44\4\1\160\25\4\1\54\72\4"+
    "\1\54\10\4\1\161\10\4\1\162\50\4\1\54\6\4"+
    "\1\163\13\4\1\164\3\4\1\165\43\4\1\54\4\4"+
    "\1\166\7\4\1\167\7\4\1\170\6\4\1\171\36\4"+
    "\1\54\4\4\1\172\11\4\1\173\6\4\1\141\44\4"+
    "\1\54\13\4\1\174\56\4\1\54\17\4\1\175\35\4"+
    "\4\176\4\4\5\176\1\177\3\176\1\4\30\176\1\4"+
    "\1\176\1\4\12\200\1\201\20\200\1\202\37\200\2\57"+
    "\1\3\1\57\1\5\66\57\33\4\1\54\13\4\1\203"+
    "\41\4\4\62\11\4\1\54\72\4\1\54\4\4\1\204"+
    "\1\205\1\206\1\207\1\4\1\71\1\4\1\210\2\4"+
    "\1\75\1\211\1\77\1\100\1\101\1\102\1\4\1\212"+
    "\1\213\1\100\34\4\1\214\5\4\1\54\5\4\1\107"+
    "\1\4\1\215\14\4\1\216\1\217\36\4\1\220\5\4"+
    "\1\54\16\4\1\221\5\4\1\102\45\4\1\54\4\4"+
    "\1\222\7\4\1\223\4\4\1\224\50\4\1\54\4\4"+
    "\1\225\2\4\1\226\1\227\1\230\2\4\1\231\1\4"+
    "\1\226\7\4\1\226\43\4\1\54\17\4\1\102\52\4"+
    "\1\54\14\4\1\232\4\4\1\233\33\4\4\234\11\4"+
    "\1\54\10\4\1\235\13\4\1\226\37\4\1\220\5\4"+
    "\1\54\20\4\1\236\51\4\1\54\5\4\1\237\64\4"+
    "\1\54\14\4\1\226\55\4\1\54\4\4\1\240\65\4"+
    "\1\54\4\4\1\241\65\4\1\54\16\4\1\226\45\4"+
    "\1\157\5\4\1\54\24\4\1\242\37\4\1\220\5\4"+
    "\1\54\64\4\1\220\5\4\1\54\4\4\1\243\3\4"+
    "\1\244\6\4\1\245\2\4\1\246\3\4\1\247\1\250"+
    "\42\4\1\54\4\4\1\251\1\252\1\4\1\253\1\4"+
    "\1\254\1\4\1\255\1\256\7\4\1\253\37\4\1\220"+
    "\5\4\1\54\16\4\1\226\53\4\1\54\4\4\1\257"+
    "\65\4\1\54\5\4\1\257\64\4\1\54\10\4\1\260"+
    "\61\4\1\54\1\4\1\261\70\4\1\54\5\4\1\262"+
    "\64\4\1\54\6\4\1\263\15\4\1\264\45\4\1\54"+
    "\14\4\1\265\1\4\1\266\53\4\1\54\22\4\1\267"+
    "\47\4\1\54\26\4\1\270\43\4\1\54\25\4\1\271"+
    "\44\4\1\54\6\4\1\272\16\4\1\273\44\4\1\54"+
    "\12\4\1\274\57\4\1\54\14\4\1\275\4\4\1\276"+
    "\50\4\1\54\7\4\1\277\14\4\1\300\45\4\1\54"+
    "\16\4\1\301\1\4\1\302\51\4\1\54\4\4\1\303"+
    "\65\4\1\54\4\4\1\304\65\4\1\54\16\4\1\305"+
    "\53\4\1\54\26\4\1\306\43\4\1\54\24\4\1\307"+
    "\3\4\1\156\41\4\1\54\31\4\1\310\40\4\1\54"+
    "\25\4\1\311\44\4\1\54\20\4\1\312\51\4\1\54"+
    "\4\4\1\313\65\4\1\54\4\4\1\314\65\4\1\54"+
    "\24\4\1\315\45\4\1\54\10\4\1\316\61\4\1\54"+
    "\22\4\1\317\47\4\1\54\17\4\1\320\43\4\1\321"+
    "\6\4\1\54\72\4\1\54\14\4\1\322\55\4\1\54"+
    "\20\4\1\323\51\4\1\54\20\4\1\324\4\4\1\325"+
    "\44\4\1\54\24\4\1\326\45\4\1\54\20\4\1\327"+
    "\5\4\1\330\43\4\1\54\16\4\1\331\53\4\1\54"+
    "\17\4\1\332\52\4\1\54\5\4\1\333\2\4\1\334"+
    "\1\335\17\4\1\336\40\4\1\54\17\4\1\337\52\4"+
    "\1\54\16\4\1\340\11\4\1\341\41\4\1\54\31\4"+
    "\1\342\40\4\1\54\21\4\1\343\2\4\1\344\45\4"+
    "\1\54\4\4\1\345\65\4\1\54\4\4\1\346\17\4"+
    "\1\347\6\4\1\350\36\4\1\54\24\4\1\351\45\4"+
    "\1\54\26\4\1\352\43\4\1\54\4\4\1\353\65\4"+
    "\1\54\22\4\1\354\47\4\1\54\16\4\1\355\53\4"+
    "\1\54\14\4\1\356\55\4\1\54\14\4\1\357\55\4"+
    "\1\54\22\4\1\274\32\4\4\360\4\4\5\360\1\361"+
    "\3\360\1\4\30\360\1\4\1\360\17\4\4\360\4\4"+
    "\2\360\1\362\2\360\1\361\3\360\1\4\30\360\1\4"+
    "\1\360\1\4\12\200\1\363\20\200\1\202\51\200\1\363"+
    "\2\200\1\364\15\200\1\202\51\200\1\363\15\200\1\365"+
    "\2\200\1\202\37\200\16\4\4\234\11\4\1\54\64\4"+
    "\1\214\5\4\1\54\7\4\1\215\14\4\1\216\1\217"+
    "\44\4\1\54\16\4\1\221\53\4\1\54\4\4\1\222"+
    "\14\4\1\366\50\4\1\54\7\4\1\226\4\4\1\231"+
    "\1\4\1\226\7\4\1\226\27\4\2\367\12\4\1\54"+
    "\10\4\1\235\13\4\1\226\45\4\1\54\4\4\1\370"+
    "\65\4\1\54\10\4\1\244\16\4\1\250\42\4\1\54"+
    "\4\4\1\251\1\252\1\4\1\253\1\4\1\254\1\4"+
    "\1\255\10\4\1\253\45\4\1\54\7\4\1\371\62\4"+
    "\1\54\26\4\1\372\43\4\1\54\14\4\1\373\55\4"+
    "\1\54\21\4\1\374\50\4\1\54\22\4\1\375\47\4"+
    "\1\54\26\4\1\376\43\4\1\54\7\4\1\376\6\4"+
    "\1\377\53\4\1\54\26\4\1\u0100\35\4\1\157\5\4"+
    "\1\54\72\4\1\54\16\4\1\102\53\4\1\54\20\4"+
    "\1\102\51\4\1\54\30\4\1\226\41\4\1\54\12\4"+
    "\1\u0101\57\4\1\54\21\4\1\u0102\42\4\1\u0103\5\4"+
    "\1\54\72\4\1\54\4\4\1\u0104\65\4\1\54\25\4"+
    "\1\102\44\4\1\54\7\4\1\102\62\4\1\54\14\4"+
    "\1\u0105\7\4\1\u0106\45\4\1\54\30\4\1\367\41\4"+
    "\1\54\10\4\1\226\61\4\1\54\17\4\1\u0107\52\4"+
    "\1\54\6\4\1\u0108\63\4\1\54\4\4\1\u0109\65\4"+
    "\1\54\4\4\1\230\65\4\1\54\24\4\1\u010a\45\4"+
    "\1\54\5\4\1\102\14\4\1\102\47\4\1\54\5\4"+
    "\1\u010b\64\4\1\54\21\4\1\u010c\42\4\1\u010d\5\4"+
    "\1\54\72\4\1\54\21\4\1\u010e\42\4\1\u010d\5\4"+
    "\1\54\10\4\1\u010f\61\4\1\54\17\4\1\376\52\4"+
    "\1\54\24\4\1\102\45\4\1\54\4\4\1\u0110\65\4"+
    "\1\54\2\4\1\u0111\67\4\1\54\24\4\1\u010d\45\4"+
    "\1\54\10\4\1\u0112\61\4\1\54\21\4\1\u0113\50\4"+
    "\1\54\12\4\1\u0114\5\4\1\u0115\51\4\1\54\21\4"+
    "\1\u0116\50\4\1\54\16\4\1\u0117\53\4\1\54\14\4"+
    "\1\u0118\55\4\1\54\10\4\1\u0119\61\4\1\54\21\4"+
    "\1\u011a\50\4\1\54\21\4\1\u011b\50\4\1\54\20\4"+
    "\1\u011c\51\4\1\54\6\4\1\u011d\63\4\1\54\33\4"+
    "\1\u011e\36\4\1\54\7\4\1\u011f\62\4\1\54\16\4"+
    "\1\u0120\53\4\1\54\26\4\1\u0121\43\4\1\54\24\4"+
    "\1\u0122\45\4\1\54\25\4\1\u0123\16\4\1\u010d\25\4"+
    "\1\54\21\4\1\u0124\3\4\1\u0125\44\4\1\54\4\4"+
    "\1\u0126\65\4\1\54\20\4\1\u0127\51\4\1\54\10\4"+
    "\1\u0128\61\4\1\54\26\4\1\274\43\4\1\54\17\4"+
    "\1\u0129\52\4\1\54\7\4\1\u012a\62\4\1\54\21\4"+
    "\1\u012b\50\4\1\54\11\4\1\u012c\60\4\1\54\4\4"+
    "\1\u012d\65\4\1\54\16\4\1\u011e\53\4\1\54\20\4"+
    "\1\u012e\51\4\1\54\12\4\1\u012f\57\4\1\54\15\4"+
    "\1\u011e\54\4\1\54\26\4\1\u0130\43\4\1\54\23\4"+
    "\1\u0131\46\4\1\54\27\4\1\274\42\4\1\54\4\4"+
    "\1\u011e\65\4\1\54\26\4\1\u0132\43\4\1\54\10\4"+
    "\1\u0133\61\4\1\54\24\4\1\274\45\4\1\54\17\4"+
    "\1\u0134\52\4\1\54\24\4\1\u0135\45\4\1\54\24\4"+
    "\1\u0136\45\4\1\54\10\4\1\u0137\52\4\1\u0138\6\4"+
    "\1\54\72\4\1\54\10\4\1\u0139\61\4\1\54\25\4"+
    "\1\u0125\44\4\1\54\22\4\1\u013a\47\4\1\54\21\4"+
    "\1\u013b\50\4\1\54\6\4\1\u0121\63\4\1\54\24\4"+
    "\1\u013c\45\4\1\54\14\4\1\u013d\55\4\1\54\16\4"+
    "\1\u013e\53\4\1\54\12\4\1\u013f\57\4\1\54\16\4"+
    "\1\u0140\53\4\1\54\20\4\1\u0141\51\4\1\54\10\4"+
    "\1\u0142\61\4\1\54\14\4\1\u0143\55\4\1\54\20\4"+
    "\1\u0115\51\4\1\54\16\4\1\u0144\36\4\4\u0145\4\4"+
    "\5\u0145\1\u0146\3\u0145\1\4\30\u0145\1\4\1\u0145\17\4"+
    "\4\u0145\4\4\2\u0145\1\u0147\2\u0145\1\u0146\3\u0145\1\4"+
    "\30\u0145\1\4\1\u0145\17\4\4\u0145\4\4\5\u0145\1\u0146"+
    "\1\u0145\1\u0148\1\u0145\1\4\30\u0145\1\4\1\u0145\1\4"+
    "\12\200\1\363\2\200\1\3\15\200\1\202\51\200\1\363"+
    "\20\200\1\202\1\200\1\u0149\35\200\33\4\1\54\16\4"+
    "\1\377\45\4\1\u014a\5\4\1\54\72\4\1\54\14\4"+
    "\1\u0105\55\4\1\54\24\4\1\u014b\45\4\1\54\14\4"+
    "\1\u014c\55\4\1\54\7\4\1\u014d\62\4\1\54\6\4"+
    "\1\u014e\63\4\1\54\26\4\1\u014f\43\4\1\54\10\4"+
    "\1\102\53\4\1\u010d\5\4\1\54\12\4\1\u0150\57\4"+
    "\1\54\4\4\1\102\65\4\1\54\6\4\1\u0151\20\4"+
    "\1\u0152\42\4\1\54\26\4\1\u0153\43\4\1\54\7\4"+
    "\1\u0153\62\4\1\54\20\4\1\226\51\4\1\54\15\4"+
    "\1\102\54\4\1\54\22\4\1\102\47\4\1\54\26\4"+
    "\1\u0154\43\4\1\54\16\4\1\227\53\4\1\54\21\4"+
    "\1\u0155\50\4\1\54\16\4\1\u0156\53\4\1\54\7\4"+
    "\1\u0157\62\4\1\54\21\4\1\u0158\50\4\1\54\4\4"+
    "\1\u0159\65\4\1\54\15\4\1\u015a\54\4\1\54\1\u015b"+
    "\71\4\1\54\25\4\1\u015c\44\4\1\54\20\4\1\u015d"+
    "\51\4\1\54\20\4\1\u0133\51\4\1\54\15\4\1\u0133"+
    "\54\4\1\54\31\4\1\u015e\40\4\1\54\10\4\1\312"+
    "\61\4\1\54\6\4\1\u015f\63\4\1\54\11\4\1\u0160"+
    "\60\4\1\54\16\4\1\u0161\53\4\1\54\27\4\1\u0162"+
    "\42\4\1\54\15\4\1\274\54\4\1\54\15\4\1\u0163"+
    "\54\4\1\54\10\4\1\u0164\61\4\1\54\22\4\1\u0165"+
    "\2\4\1\u0166\44\4\1\54\10\4\1\333\61\4\1\54"+
    "\25\4\1\u0167\44\4\1\54\25\4\1\307\44\4\1\54"+
    "\24\4\1\u0168\45\4\1\54\22\4\1\u0169\30\4\1\u016a"+
    "\16\4\1\54\72\4\1\54\16\4\1\u016b\53\4\1\54"+
    "\10\4\1\u016c\61\4\1\54\10\4\1\u016d\61\4\1\54"+
    "\27\4\1\175\33\4\1\u016e\6\4\1\54\16\4\1\u016f"+
    "\53\4\1\54\6\4\1\332\63\4\1\54\7\4\1\u0170"+
    "\62\4\1\54\27\4\1\u0171\42\4\1\54\14\4\1\u0172"+
    "\55\4\1\54\27\4\1\u0173\42\4\1\54\14\4\1\u0174"+
    "\55\4\1\54\5\4\1\u0175\64\4\1\54\4\4\1\u0176"+
    "\65\4\1\54\4\4\1\u0177\65\4\1\54\24\4\1\u0178"+
    "\45\4\1\54\24\4\1\u0179\45\4\1\54\10\4\1\u010d"+
    "\61\4\1\54\16\4\1\u017a\53\4\1\54\26\4\1\u017b"+
    "\43\4\1\54\15\4\1\u017c\54\4\1\54\10\4\1\u017d"+
    "\61\4\1\54\10\4\1\u017e\61\4\1\54\10\4\1\307"+
    "\61\4\1\54\25\4\1\u017f\35\4\1\u0180\6\4\1\54"+
    "\72\4\1\54\12\4\1\u0114\57\4\1\54\10\4\1\u0181"+
    "\44\4\4\u0182\4\4\5\u0182\1\u0183\3\u0182\1\4\30\u0182"+
    "\1\4\1\u0182\17\4\4\u0182\4\4\2\u0182\1\u0184\2\u0182"+
    "\1\u0183\3\u0182\1\4\30\u0182\1\4\1\u0182\17\4\4\u0182"+
    "\4\4\5\u0182\1\u0183\1\u0182\1\u0185\1\u0182\1\4\30\u0182"+
    "\1\4\1\u0182\17\4\4\u0182\4\4\5\u0182\1\u0183\2\u0182"+
    "\1\u0186\1\4\30\u0182\1\4\1\u0182\1\4\12\200\1\363"+
    "\20\200\1\202\2\200\1\u0187\34\200\33\4\1\54\10\4"+
    "\1\u0188\61\4\1\54\6\4\1\u0189\63\4\1\54\10\4"+
    "\1\367\61\4\1\54\15\4\1\u018a\54\4\1\54\14\4"+
    "\1\u018b\55\4\1\54\24\4\1\u018c\45\4\1\54\4\4"+
    "\1\u018d\65\4\1\54\24\4\1\242\45\4\1\54\10\4"+
    "\1\u018e\61\4\1\54\14\4\1\u018f\55\4\1\54\20\4"+
    "\1\u0190\51\4\1\54\10\4\1\253\61\4\1\54\33\4"+
    "\1\253\36\4\1\54\26\4\1\253\43\4\1\54\7\4"+
    "\1\253\61\4\1\u011e\1\54\72\4\1\54\25\4\1\u0191"+
    "\44\4\1\54\33\4\1\u0192\36\4\1\54\26\4\1\u0193"+
    "\43\4\1\54\16\4\1\u0194\53\4\1\54\21\4\1\134"+
    "\50\4\1\54\21\4\1\u0164\50\4\1\54\20\4\1\u0195"+
    "\51\4\1\54\23\4\1\u0196\46\4\1\54\24\4\1\u0133"+
    "\45\4\1\54\4\4\1\u0197\65\4\1\54\22\4\1\u0198"+
    "\47\4\1\54\10\4\1\u0199\61\4\1\54\4\4\1\u019a"+
    "\65\4\1\54\25\4\1\u019b\44\4\1\54\21\4\1\u019c"+
    "\50\4\1\54\5\4\1\u019d\17\4\1\u0117\44\4\1\54"+
    "\24\4\1\u019e\45\4\1\54\4\4\1\u019f\65\4\1\54"+
    "\10\4\1\u01a0\61\4\1\54\4\4\1\u01a1\65\4\1\54"+
    "\20\4\1\121\51\4\1\54\10\4\1\u017c\61\4\1\54"+
    "\6\4\1\u01a2\63\4\1\54\10\4\1\u0195\61\4\1\54"+
    "\17\4\1\u01a3\52\4\1\54\22\4\1\u0133\47\4\1\54"+
    "\21\4\1\u0168\50\4\1\54\25\4\1\u01a4\44\4\1\54"+
    "\16\4\1\u01a5\44\4\1\u01a6\6\4\1\54\72\4\1\54"+
    "\10\4\1\274\45\4\1\u01a7\13\4\1\54\72\4\1\54"+
    "\26\4\1\u01a8\43\4\1\54\16\4\1\u01a9\36\4\4\u01aa"+
    "\4\4\5\u01aa\1\u01ab\3\u01aa\1\4\30\u01aa\1\4\1\u01aa"+
    "\17\4\4\u01aa\4\4\2\u01aa\1\u01ac\2\u01aa\1\u01ab\3\u01aa"+
    "\1\4\30\u01aa\1\4\1\u01aa\17\4\4\u01aa\4\4\5\u01aa"+
    "\1\u01ab\1\u01aa\1\u01ad\1\u01aa\1\4\30\u01aa\1\4\1\u01aa"+
    "\17\4\4\u01aa\4\4\5\u01aa\1\u01ab\2\u01aa\1\u01ae\1\4"+
    "\30\u01aa\1\4\1\u01aa\17\4\4\u01aa\4\4\5\u01aa\1\u01ab"+
    "\1\u01af\2\u01aa\1\4\30\u01aa\1\4\1\u01aa\1\4\12\200"+
    "\1\363\20\200\1\202\1\u01b0\36\200\33\4\1\54\25\4"+
    "\1\u01b1\44\4\1\54\16\4\1\u014d\53\4\1\54\23\4"+
    "\1\u01b2\46\4\1\54\21\4\1\u01b3\50\4\1\54\21\4"+
    "\1\u01b4\50\4\1\54\22\4\1\u01b5\47\4\1\54\24\4"+
    "\1\367\45\4\1\54\21\4\1\u01b6\50\4\1\54\12\4"+
    "\1\102\57\4\1\54\15\4\1\u01b7\54\4\1\54\17\4"+
    "\1\274\52\4\1\54\24\4\1\u01b8\45\4\1\54\10\4"+
    "\1\u01b9\61\4\1\54\7\4\1\274\62\4\1\54\27\4"+
    "\1\u01ba\42\4\1\54\7\4\1\u01bb\62\4\1\54\4\4"+
    "\1\u01bc\65\4\1\54\26\4\1\u0133\43\4\1\54\20\4"+
    "\1\u010d\51\4\1\54\13\4\1\u01bd\56\4\1\54\4\4"+
    "\1\u01be\65\4\1\54\21\4\1\u01bf\50\4\1\54\25\4"+
    "\1\u010d\44\4\1\54\20\4\1\u01c0\51\4\1\54\32\4"+
    "\1\274\37\4\1\54\12\4\1\332\57\4\1\54\21\4"+
    "\1\u01c1\50\4\1\54\10\4\1\u01c2\61\4\1\54\10\4"+
    "\1\u01c3\61\4\1\54\14\4\1\u01c4\55\4\1\54\25\4"+
    "\1\u01c5\35\4\1\u01c6\6\4\1\54\72\4\1\54\4\4"+
    "\1\u01c7\32\4\12\200\1\363\17\200\1\u01c8\1\202\37\200"+
    "\33\4\1\54\25\4\1\367\44\4\1\54\27\4\1\u01c9"+
    "\42\4\1\54\20\4\1\253\51\4\1\54\27\4\1\u01ca"+
    "\42\4\1\54\26\4\1\u01cb\43\4\1\54\20\4\1\367"+
    "\51\4\1\54\10\4\1\u01cc\61\4\1\54\4\4\1\u01cd"+
    "\37\4\1\u014a\25\4\1\54\72\4\1\54\21\4\1\u01ce"+
    "\50\4\1\54\7\4\1\u01a5\62\4\1\54\6\4\1\u01a5"+
    "\63\4\1\54\4\4\1\u01cf\65\4\1\54\7\4\1\u01d0"+
    "\62\4\1\54\24\4\1\300\45\4\1\54\12\4\1\u01d1"+
    "\57\4\1\54\16\4\1\274\53\4\1\54\25\4\1\274"+
    "\44\4\1\54\7\4\1\u01d2\62\4\1\54\20\4\1\u01d3"+
    "\51\4\1\54\6\4\1\u01d4\63\4\1\54\26\4\1\u0140"+
    "\43\4\1\54\21\4\1\u01d5\50\4\1\54\22\4\1\253"+
    "\47\4\1\54\14\4\1\u01d6\55\4\1\54\33\4\1\307"+
    "\36\4\1\54\20\4\1\u01d7\51\4\1\54\26\4\1\u01d8"+
    "\43\4\1\54\24\4\1\u0140\36\4\1\u01d9\6\4\1\54"+
    "\63\4\1\u01da\6\4\1\54\63\4\1\u01db\6\4\1\54"+
    "\72\4\1\54\12\4\1\u0133\57\4\1\54\24\4\1\u01dc"+
    "\45\4\1\54\26\4\1\242\43\4\1\54\21\4\1\u0105"+
    "\50\4\1\54\25\4\1\u01dd\44\4\1\54\10\4\1\156"+
    "\61\4\1\54\14\4\1\u01de\55\4\1\54\22\4\1\u01df"+
    "\47\4\1\54\22\4\1\u01e0\47\4\1\54\4\4\1\u01e1"+
    "\65\4\1\54\26\4\1\u011e\43\4\1\54\24\4\1\u01e2"+
    "\45\4\1\54\10\4\1\u01e3\61\4\1\54\20\4\1\u01e4"+
    "\51\4\1\54\6\4\1\u01e5\63\4\1\54\33\4\1\u0133"+
    "\3\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25783];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\47\1\3\0\1\1\1\0\2\1"+
    "\47\0\1\1\11\0\1\1\12\0\2\1\33\0\1\1"+
    "\3\0\1\1\53\0\1\1\12\0\1\1\11\0\1\1"+
    "\42\0\1\1\16\0\1\1\11\0\1\1\13\0\1\1"+
    "\4\0\1\1\11\0\1\1\1\0\1\1\4\0\1\1"+
    "\3\0\1\1\4\0\1\1\21\0\1\1\17\0\1\1"+
    "\15\0\1\1\3\0\1\1\1\0\1\1\16\0\1\1"+
    "\2\0\2\1\44\0\1\1\3\0\6\1\26\0\1\1"+
    "\1\0\1\1\20\0\3\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 42: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 4:
            { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 5:
            { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 6:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 7:
            { return token(yytext(), "Signos", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 8:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 9:
            { return token(yytext(), "PUNTO_COMA", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 10:
            { return token(yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 11:
            { return token(yytext(), "TXT", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 12:
            { return token(yytext(), "LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 13:
            { return token(yytext(), "LLAVE_c", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 14:
            { return token(yytext(), "Error", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 15:
            { return token(yytext(), "WHILE", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 16:
            { return token(yytext(), "IF", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 17:
            { return token(yytext(), "Agrupa", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 18:
            { return token(yytext(), "texte", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 19:
            { return token(yytext(), "Hiperv", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 20:
            { return token(yytext(), "EtiquetasT", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 21:
            { return token(yytext(), "EtiquetaO", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 22:
            { return token(yytext(), "Atributos", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 23:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return textColor(yychar, yylength(), new Color(0, 191, 255));
            }
            // fall through
          case 63: break;
          case 24:
            { return token(yytext(), "ETIQUETA", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 25:
            { return token(yytext(), "tabla", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 26:
            { return token(yytext(), "Estructura", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 27:
            { return token(yytext(), "else", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 28:
            { return token(yytext(), "AtributosO", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 29:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return token(yytext(), "R", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 30:
            { return token(yytext(), "Etiqueta", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 31:
            { return token(yytext(), "BREAK", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 32:
            { return token(yytext(), "TIPO_DATO" , yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 33:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return token(yytext(), "referenci", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 34:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return token(yytext(), "Escrit", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 35:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return token(yytext(), "Empe", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 36:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return token(yytext(), "Targ", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 38:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return token(yytext(), "Descarga", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 39:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return token(yytext(), "Refer", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 40:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return token(yytext(), "Rever", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

    private Token textColor(long yychar, int yylength, Color color) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


}
