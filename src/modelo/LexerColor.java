package modelo;

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\2\0\1\6\2\0\1\7\1\0\2\10\1\11\1\0"+
    "\1\12\1\13\1\0\1\14\1\15\1\16\5\17\3\20"+
    "\1\0\1\12\1\21\1\22\1\23\2\0\1\24\1\25"+
    "\1\26\1\27\1\30\11\24\1\31\1\32\3\24\1\33"+
    "\4\24\1\34\1\24\1\35\1\0\1\35\1\0\1\24"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\24\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\24\1\10\1\66\1\10\7\0\1\3"+
    "\73\0\1\24\7\0\1\24\3\0\1\24\3\0\1\24"+
    "\1\0\1\24\6\0\1\24\1\0\1\24\4\0\1\24"+
    "\7\0\1\24\3\0\1\24\3\0\1\24\1\0\1\24"+
    "\6\0\1\24\1\0\1\24\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\2\1\1\1\3\1\4"+
    "\1\5\1\6\2\7\2\6\27\10\3\0\1\11\47\0"+
    "\1\12\23\0\1\13\22\0\2\11\72\0\1\14\11\0"+
    "\1\15\40\0\1\11\35\0\1\13\14\0\1\13\4\0"+
    "\1\14\7\0\1\16\33\0\1\17\13\0\1\20\3\0"+
    "\1\13\1\0\1\21\14\0\1\14\2\0\1\12\35\0"+
    "\1\22\3\0\6\23\15\0\1\24\1\0\1\13\10\0"+
    "\1\25\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\67\0\156\0\245\0\67\0\67"+
    "\0\67\0\334\0\67\0\u0113\0\u014a\0\67\0\67\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u01ef\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u04ba\0\67\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\67"+
    "\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25"+
    "\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\67\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\67\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u168f\0\u2cb0"+
    "\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68"+
    "\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020"+
    "\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8"+
    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390"+
    "\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548"+
    "\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700"+
    "\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\67\0\u3881"+
    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    "\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1"+
    "\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9"+
    "\0\u3de0\0\u3e17\0\67\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a"+
    "\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\67\0\u40ab"+
    "\0\u40e2\0\u4119\0\u4150\0\u4187\0\67\0\u41be\0\u41f5\0\u422c"+
    "\0\u4263\0\u429a\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4"+
    "\0\u441b\0\u4452\0\u4489\0\u44c0\0\67\0\u44f7\0\u452e\0\u4565"+
    "\0\u459c\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d"+
    "\0\u4754\0\u478b\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5"+
    "\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d"+
    "\0\u4ac4\0\u4afb\0\67\0\u4b32\0\u4b69\0\u4ba0\0\67\0\u01ef"+
    "\0\u0b9a\0\u1f5e\0\u316a\0\u3e4e\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c"+
    "\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34"+
    "\0\u4e6b\0\67\0\u4ea2\0\u168f\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e"+
    "\0\u4fb5\0\u4fec\0\u5023\0\u505a\0\67\0\u5091\0\u50c8\0\u50ff"+
    "\0\u5136\0\u516d\0\u51a4\0\u51db\0\u5212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\2\1\11\1\2\1\12\1\13\3\14\1\15\1\10"+
    "\1\16\1\17\1\20\1\17\1\21\1\17\1\22\3\17"+
    "\1\16\1\23\1\24\1\25\1\26\1\27\1\30\1\17"+
    "\1\31\1\32\1\17\1\33\1\34\1\35\1\36\2\37"+
    "\1\40\1\41\1\42\1\17\1\43\1\44\1\45\1\17"+
    "\1\7\31\4\1\46\37\4\1\3\26\4\1\46\52\4"+
    "\4\47\3\4\11\47\1\4\31\47\11\4\1\50\2\4"+
    "\1\51\14\4\1\46\52\4\4\14\10\4\1\46\51\4"+
    "\1\52\14\4\1\46\4\4\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\4\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\4\1\72\1\73\1\74"+
    "\1\75\1\76\34\4\1\46\24\4\1\77\125\4\1\100"+
    "\2\4\1\46\66\4\1\46\5\4\1\101\1\102\7\4"+
    "\1\103\3\4\1\104\1\4\1\105\41\4\1\46\4\4"+
    "\1\106\5\4\1\107\1\4\1\110\1\4\1\111\2\4"+
    "\1\112\44\4\1\46\10\4\1\113\2\4\1\114\2\4"+
    "\1\115\2\4\1\116\44\4\1\46\4\4\1\117\7\4"+
    "\1\120\4\4\1\121\44\4\1\46\16\4\1\122\47\4"+
    "\1\46\21\4\1\123\2\4\1\124\41\4\1\46\10\4"+
    "\1\125\1\4\1\126\11\4\1\127\1\130\1\131\37\4"+
    "\1\46\7\4\1\132\1\4\1\11\13\4\1\133\40\4"+
    "\1\46\4\4\1\134\7\4\1\135\51\4\1\46\4\4"+
    "\1\136\3\4\1\137\16\4\1\140\36\4\1\46\4\4"+
    "\1\141\14\4\1\142\5\4\1\143\36\4\1\46\16\4"+
    "\1\144\23\4\1\145\23\4\1\46\66\4\1\46\10\4"+
    "\1\146\10\4\1\147\44\4\1\46\6\4\1\150\13\4"+
    "\1\151\3\4\1\152\37\4\1\46\4\4\1\153\7\4"+
    "\1\154\7\4\1\155\6\4\1\156\32\4\1\46\4\4"+
    "\1\157\11\4\1\160\6\4\1\130\40\4\1\46\13\4"+
    "\1\161\52\4\1\46\17\4\1\162\32\4\4\163\3\4"+
    "\5\163\1\164\3\163\1\4\31\163\11\165\1\166\17\165"+
    "\1\167\35\165\2\51\1\170\1\51\1\171\62\51\31\4"+
    "\1\46\4\4\1\172\1\173\1\174\1\175\1\4\1\60"+
    "\1\4\1\61\2\4\1\64\1\176\1\66\1\67\1\70"+
    "\1\71\1\4\1\177\1\200\1\67\30\4\1\145\5\4"+
    "\1\46\5\4\1\76\1\4\1\201\14\4\1\202\1\203"+
    "\32\4\1\145\5\4\1\46\16\4\1\204\5\4\1\71"+
    "\41\4\1\46\4\4\1\205\7\4\1\206\4\4\1\207"+
    "\44\4\1\46\4\4\1\210\2\4\1\71\1\67\1\211"+
    "\2\4\1\212\1\4\1\71\7\4\1\71\37\4\1\46"+
    "\17\4\1\71\46\4\1\46\14\4\1\213\4\4\1\214"+
    "\31\4\2\71\11\4\1\46\10\4\1\215\13\4\1\71"+
    "\33\4\1\145\5\4\1\46\20\4\1\216\45\4\1\46"+
    "\5\4\1\217\60\4\1\46\14\4\1\71\51\4\1\46"+
    "\4\4\1\220\61\4\1\46\4\4\1\212\61\4\1\46"+
    "\16\4\1\71\41\4\1\145\5\4\1\46\24\4\1\221"+
    "\33\4\1\145\5\4\1\46\60\4\1\145\5\4\1\46"+
    "\4\4\1\222\3\4\1\223\6\4\1\224\2\4\1\225"+
    "\3\4\1\226\1\227\36\4\1\46\4\4\1\230\1\231"+
    "\1\4\1\71\1\4\1\232\1\4\1\233\1\234\7\4"+
    "\1\71\33\4\1\145\5\4\1\46\16\4\1\71\47\4"+
    "\1\46\4\4\1\235\61\4\1\46\5\4\1\235\60\4"+
    "\1\46\10\4\1\236\55\4\1\46\1\4\1\237\64\4"+
    "\1\46\5\4\1\240\60\4\1\46\6\4\1\241\15\4"+
    "\1\242\41\4\1\46\14\4\1\243\1\4\1\244\47\4"+
    "\1\46\22\4\1\245\43\4\1\46\26\4\1\246\37\4"+
    "\1\46\25\4\1\247\40\4\1\46\6\4\1\250\16\4"+
    "\1\251\40\4\1\46\12\4\1\145\53\4\1\46\14\4"+
    "\1\252\4\4\1\253\44\4\1\46\7\4\1\254\14\4"+
    "\1\255\41\4\1\46\16\4\1\256\1\4\1\257\45\4"+
    "\1\46\4\4\1\260\61\4\1\46\4\4\1\261\61\4"+
    "\1\46\16\4\1\262\47\4\1\46\26\4\1\263\37\4"+
    "\1\46\24\4\1\264\3\4\1\144\35\4\1\46\31\4"+
    "\1\265\34\4\1\46\25\4\1\266\40\4\1\46\20\4"+
    "\1\267\45\4\1\46\4\4\1\270\61\4\1\46\4\4"+
    "\1\271\61\4\1\46\24\4\1\272\41\4\1\46\10\4"+
    "\1\273\55\4\1\46\22\4\1\274\43\4\1\46\17\4"+
    "\1\275\37\4\1\276\6\4\1\46\66\4\1\46\14\4"+
    "\1\277\51\4\1\46\20\4\1\300\45\4\1\46\20\4"+
    "\1\301\4\4\1\302\40\4\1\46\24\4\1\303\41\4"+
    "\1\46\20\4\1\304\5\4\1\305\37\4\1\46\16\4"+
    "\1\306\47\4\1\46\17\4\1\307\46\4\1\46\5\4"+
    "\1\240\2\4\1\310\1\311\17\4\1\312\34\4\1\46"+
    "\17\4\1\313\46\4\1\46\16\4\1\314\11\4\1\315"+
    "\35\4\1\46\31\4\1\316\34\4\1\46\21\4\1\317"+
    "\2\4\1\320\41\4\1\46\4\4\1\321\61\4\1\46"+
    "\4\4\1\322\17\4\1\323\6\4\1\324\32\4\1\46"+
    "\24\4\1\325\41\4\1\46\26\4\1\326\37\4\1\46"+
    "\4\4\1\327\61\4\1\46\22\4\1\330\43\4\1\46"+
    "\16\4\1\331\47\4\1\46\14\4\1\252\51\4\1\46"+
    "\14\4\1\332\51\4\1\46\22\4\1\145\27\4\4\333"+
    "\3\4\5\333\1\334\3\333\1\4\31\333\15\4\4\333"+
    "\3\4\2\333\1\335\2\333\1\334\3\333\1\4\31\333"+
    "\11\165\1\336\17\165\1\167\46\165\1\336\2\165\1\337"+
    "\14\165\1\167\46\165\1\336\14\165\1\340\2\165\1\167"+
    "\35\165\2\4\1\170\26\4\1\46\60\4\1\145\5\4"+
    "\1\46\7\4\1\201\14\4\1\202\1\203\40\4\1\46"+
    "\16\4\1\204\47\4\1\46\4\4\1\205\14\4\1\341"+
    "\44\4\1\46\7\4\1\71\4\4\1\212\1\4\1\71"+
    "\7\4\1\71\37\4\1\46\4\4\1\342\61\4\1\46"+
    "\10\4\1\223\16\4\1\227\36\4\1\46\4\4\1\230"+
    "\1\231\1\4\1\71\1\4\1\232\1\4\1\233\10\4"+
    "\1\71\41\4\1\46\7\4\1\343\56\4\1\46\26\4"+
    "\1\344\37\4\1\46\14\4\1\345\51\4\1\46\21\4"+
    "\1\346\44\4\1\46\22\4\1\347\43\4\1\46\26\4"+
    "\1\221\37\4\1\46\7\4\1\221\6\4\1\350\47\4"+
    "\1\46\26\4\1\351\37\4\1\46\20\4\1\71\45\4"+
    "\1\46\30\4\1\71\35\4\1\46\12\4\1\352\53\4"+
    "\1\46\21\4\1\353\44\4\1\46\4\4\1\354\61\4"+
    "\1\46\25\4\1\71\40\4\1\46\7\4\1\71\56\4"+
    "\1\46\14\4\1\211\7\4\1\355\41\4\1\46\10\4"+
    "\1\71\55\4\1\46\17\4\1\356\46\4\1\46\6\4"+
    "\1\347\57\4\1\46\4\4\1\357\61\4\1\46\4\4"+
    "\1\211\61\4\1\46\24\4\1\360\41\4\1\46\5\4"+
    "\1\71\14\4\1\71\43\4\1\46\5\4\1\361\60\4"+
    "\1\46\21\4\1\362\44\4\1\46\21\4\1\363\36\4"+
    "\1\145\5\4\1\46\10\4\1\364\55\4\1\46\17\4"+
    "\1\221\46\4\1\46\24\4\1\71\41\4\1\46\4\4"+
    "\1\365\61\4\1\46\2\4\1\366\63\4\1\46\24\4"+
    "\1\145\41\4\1\46\10\4\1\367\55\4\1\46\21\4"+
    "\1\370\44\4\1\46\12\4\1\371\5\4\1\301\45\4"+
    "\1\46\21\4\1\372\44\4\1\46\16\4\1\373\47\4"+
    "\1\46\14\4\1\374\51\4\1\46\10\4\1\375\55\4"+
    "\1\46\21\4\1\376\44\4\1\46\21\4\1\377\44\4"+
    "\1\46\20\4\1\301\45\4\1\46\6\4\1\u0100\57\4"+
    "\1\46\33\4\1\145\32\4\1\46\7\4\1\u0101\56\4"+
    "\1\46\16\4\1\u0102\47\4\1\46\26\4\1\u0101\37\4"+
    "\1\46\24\4\1\u0103\41\4\1\46\25\4\1\u0104\14\4"+
    "\1\145\23\4\1\46\21\4\1\u0105\3\4\1\u0106\40\4"+
    "\1\46\4\4\1\u0107\61\4\1\46\20\4\1\u0108\45\4"+
    "\1\46\10\4\1\11\55\4\1\46\26\4\1\145\37\4"+
    "\1\46\17\4\1\u0109\46\4\1\46\7\4\1\u010a\56\4"+
    "\1\46\21\4\1\u010b\44\4\1\46\11\4\1\u010c\54\4"+
    "\1\46\4\4\1\u010d\61\4\1\46\16\4\1\145\47\4"+
    "\1\46\20\4\1\u010e\45\4\1\46\12\4\1\u010f\53\4"+
    "\1\46\15\4\1\145\50\4\1\46\26\4\1\u0110\37\4"+
    "\1\46\23\4\1\u0111\42\4\1\46\27\4\1\145\36\4"+
    "\1\46\4\4\1\145\61\4\1\46\26\4\1\u0112\37\4"+
    "\1\46\10\4\1\145\55\4\1\46\17\4\1\u0113\46\4"+
    "\1\46\24\4\1\u0114\41\4\1\46\24\4\1\u0115\41\4"+
    "\1\46\10\4\1\u0116\46\4\1\u0117\6\4\1\46\66\4"+
    "\1\46\10\4\1\u0118\55\4\1\46\25\4\1\u0106\40\4"+
    "\1\46\22\4\1\307\43\4\1\46\21\4\1\u0119\44\4"+
    "\1\46\6\4\1\u0101\57\4\1\46\24\4\1\u011a\41\4"+
    "\1\46\14\4\1\u011b\51\4\1\46\16\4\1\u011c\47\4"+
    "\1\46\12\4\1\u011d\53\4\1\46\16\4\1\u011e\47\4"+
    "\1\46\20\4\1\u011f\45\4\1\46\10\4\1\u0120\55\4"+
    "\1\46\14\4\1\u0121\51\4\1\46\16\4\1\u0122\33\4"+
    "\4\u0123\3\4\5\u0123\1\u0124\3\u0123\1\4\31\u0123\15\4"+
    "\4\u0123\3\4\2\u0123\1\u0125\2\u0123\1\u0124\3\u0123\1\4"+
    "\31\u0123\15\4\4\u0123\3\4\5\u0123\1\u0124\1\u0123\1\u0126"+
    "\1\u0123\1\4\31\u0123\11\165\1\336\2\165\1\170\14\165"+
    "\1\167\46\165\1\336\17\165\1\167\1\165\1\u0127\33\165"+
    "\31\4\1\46\16\4\1\350\47\4\1\46\14\4\1\211"+
    "\51\4\1\46\24\4\1\u0128\41\4\1\46\14\4\1\u0129"+
    "\51\4\1\46\7\4\1\221\56\4\1\46\6\4\1\u012a"+
    "\57\4\1\46\26\4\1\u012b\31\4\1\145\5\4\1\46"+
    "\12\4\1\u012c\53\4\1\46\4\4\1\71\61\4\1\46"+
    "\6\4\1\u012d\20\4\1\u012e\36\4\1\46\26\4\1\u012f"+
    "\37\4\1\46\7\4\1\u012f\56\4\1\46\15\4\1\71"+
    "\50\4\1\46\22\4\1\71\43\4\1\46\16\4\1\67"+
    "\47\4\1\46\21\4\1\u0130\44\4\1\46\16\4\1\221"+
    "\47\4\1\46\7\4\1\u0131\56\4\1\46\21\4\1\u0132"+
    "\44\4\1\46\4\4\1\217\61\4\1\46\15\4\1\u0133"+
    "\50\4\1\46\1\u0134\65\4\1\46\25\4\1\u0135\40\4"+
    "\1\46\20\4\1\u0136\45\4\1\46\20\4\1\145\45\4"+
    "\1\46\31\4\1\u0137\34\4\1\46\10\4\1\267\55\4"+
    "\1\46\6\4\1\u0138\57\4\1\46\11\4\1\u0139\54\4"+
    "\1\46\16\4\1\u013a\47\4\1\46\27\4\1\u013b\36\4"+
    "\1\46\15\4\1\u013c\50\4\1\46\10\4\1\240\55\4"+
    "\1\46\22\4\1\u013d\2\4\1\u013e\40\4\1\46\25\4"+
    "\1\373\40\4\1\46\25\4\1\264\40\4\1\46\24\4"+
    "\1\u013f\41\4\1\46\22\4\1\u0140\25\4\1\u0141\15\4"+
    "\1\46\66\4\1\46\16\4\1\u0142\47\4\1\46\10\4"+
    "\1\u0143\55\4\1\46\10\4\1\u0144\55\4\1\46\27\4"+
    "\1\162\27\4\1\u0145\6\4\1\46\16\4\1\u0146\47\4"+
    "\1\46\6\4\1\307\57\4\1\46\7\4\1\u0147\56\4"+
    "\1\46\27\4\1\u0148\36\4\1\46\14\4\1\u0149\51\4"+
    "\1\46\27\4\1\u014a\36\4\1\46\14\4\1\u014b\51\4"+
    "\1\46\5\4\1\u014c\60\4\1\46\4\4\1\u014d\61\4"+
    "\1\46\4\4\1\162\61\4\1\46\24\4\1\u014e\41\4"+
    "\1\46\24\4\1\u014f\41\4\1\46\16\4\1\u0150\47\4"+
    "\1\46\26\4\1\u0151\37\4\1\46\15\4\1\307\50\4"+
    "\1\46\10\4\1\u0152\55\4\1\46\10\4\1\u0153\55\4"+
    "\1\46\10\4\1\264\55\4\1\46\25\4\1\u0154\31\4"+
    "\1\u0145\6\4\1\46\66\4\1\46\12\4\1\371\53\4"+
    "\1\46\10\4\1\u0155\41\4\4\u0156\3\4\5\u0156\1\u0157"+
    "\3\u0156\1\4\31\u0156\15\4\4\u0156\3\4\2\u0156\1\u0158"+
    "\2\u0156\1\u0157\3\u0156\1\4\31\u0156\15\4\4\u0156\3\4"+
    "\5\u0156\1\u0157\1\u0156\1\u0159\1\u0156\1\4\31\u0156\15\4"+
    "\4\u0156\3\4\5\u0156\1\u0157\2\u0156\1\u015a\1\4\31\u0156"+
    "\11\165\1\336\17\165\1\167\2\165\1\u015b\32\165\31\4"+
    "\1\46\10\4\1\u015c\55\4\1\46\6\4\1\361\57\4"+
    "\1\46\15\4\1\u015d\50\4\1\46\14\4\1\u015e\51\4"+
    "\1\46\24\4\1\u015f\41\4\1\46\4\4\1\205\61\4"+
    "\1\46\24\4\1\221\41\4\1\46\10\4\1\235\55\4"+
    "\1\46\20\4\1\u0160\45\4\1\46\33\4\1\71\32\4"+
    "\1\46\26\4\1\71\36\4\1\145\1\46\66\4\1\46"+
    "\25\4\1\u0161\40\4\1\46\33\4\1\u0162\32\4\1\46"+
    "\26\4\1\u0163\37\4\1\46\16\4\1\u0164\47\4\1\46"+
    "\21\4\1\123\44\4\1\46\21\4\1\240\44\4\1\46"+
    "\20\4\1\u0165\45\4\1\46\23\4\1\u0166\42\4\1\46"+
    "\4\4\1\u0167\61\4\1\46\22\4\1\u0168\43\4\1\46"+
    "\4\4\1\371\61\4\1\46\25\4\1\u0169\40\4\1\46"+
    "\21\4\1\u016a\44\4\1\46\5\4\1\u016b\17\4\1\373"+
    "\40\4\1\46\24\4\1\u016c\41\4\1\46\4\4\1\u016d"+
    "\61\4\1\46\10\4\1\u016e\55\4\1\46\4\4\1\u016f"+
    "\61\4\1\46\20\4\1\110\45\4\1\46\10\4\1\307"+
    "\55\4\1\46\6\4\1\u0170\57\4\1\46\10\4\1\u0165"+
    "\55\4\1\46\17\4\1\u0171\46\4\1\46\21\4\1\u013f"+
    "\44\4\1\46\25\4\1\u0172\40\4\1\46\16\4\1\u0110"+
    "\40\4\1\u0173\6\4\1\46\53\4\1\u0174\12\4\1\46"+
    "\66\4\1\46\26\4\1\u0175\37\4\1\46\16\4\1\u0176"+
    "\33\4\4\u0177\3\4\5\u0177\1\u0178\3\u0177\1\4\31\u0177"+
    "\15\4\4\u0177\3\4\2\u0177\1\u0179\2\u0177\1\u0178\3\u0177"+
    "\1\4\31\u0177\15\4\4\u0177\3\4\5\u0177\1\u0178\1\u0177"+
    "\1\u017a\1\u0177\1\4\31\u0177\15\4\4\u0177\3\4\5\u0177"+
    "\1\u0178\2\u0177\1\u017b\1\4\31\u0177\15\4\4\u0177\3\4"+
    "\5\u0177\1\u0178\1\u017c\2\u0177\1\4\31\u0177\11\165\1\336"+
    "\17\165\1\167\1\u017d\34\165\31\4\1\46\25\4\1\216"+
    "\40\4\1\46\23\4\1\u017e\42\4\1\46\21\4\1\211"+
    "\44\4\1\46\21\4\1\u017f\44\4\1\46\12\4\1\71"+
    "\53\4\1\46\15\4\1\u0180\50\4\1\46\17\4\1\145"+
    "\46\4\1\46\24\4\1\u0181\41\4\1\46\10\4\1\144"+
    "\55\4\1\46\7\4\1\145\56\4\1\46\27\4\1\u0182"+
    "\36\4\1\46\7\4\1\u0183\56\4\1\46\4\4\1\u0184"+
    "\61\4\1\46\13\4\1\u0185\52\4\1\46\4\4\1\u0186"+
    "\61\4\1\46\21\4\1\u0187\44\4\1\46\25\4\1\145"+
    "\40\4\1\46\20\4\1\u0188\45\4\1\46\32\4\1\145"+
    "\33\4\1\46\12\4\1\307\53\4\1\46\21\4\1\275"+
    "\44\4\1\46\10\4\1\u016c\55\4\1\46\10\4\1\u0186"+
    "\55\4\1\46\25\4\1\u0189\31\4\1\u018a\6\4\1\46"+
    "\66\4\1\46\4\4\1\u018b\30\4\11\165\1\336\16\165"+
    "\1\u018c\1\167\35\165\31\4\1\46\27\4\1\u018d\36\4"+
    "\1\46\27\4\1\356\36\4\1\46\10\4\1\u018e\55\4"+
    "\1\46\4\4\1\u018f\61\4\1\46\21\4\1\u0190\44\4"+
    "\1\46\7\4\1\u0110\56\4\1\46\6\4\1\u0110\57\4"+
    "\1\46\4\4\1\u0191\61\4\1\46\7\4\1\u0192\56\4"+
    "\1\46\24\4\1\255\41\4\1\46\12\4\1\u0192\53\4"+
    "\1\46\6\4\1\u0193\57\4\1\46\26\4\1\u011e\37\4"+
    "\1\46\21\4\1\206\44\4\1\46\33\4\1\264\32\4"+
    "\1\46\20\4\1\u0194\45\4\1\46\26\4\1\u0164\37\4"+
    "\1\46\24\4\1\u011e\32\4\1\u0195\6\4\1\46\66\4"+
    "\1\46\24\4\1\u0196\41\4\1\46\25\4\1\u0197\40\4"+
    "\1\46\14\4\1\u0198\51\4\1\46\22\4\1\u0199\43\4"+
    "\1\46\22\4\1\267\43\4\1\46\4\4\1\u019a\61\4"+
    "\1\46\24\4\1\u019b\41\4\1\46\10\4\1\u019c\55\4"+
    "\1\46\20\4\1\u019d\45\4\1\46\6\4\1\254\26\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21065];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\41\1\3\0\1\1\47\0\1\1"+
    "\23\0\1\1\22\0\2\1\72\0\1\1\11\0\1\1"+
    "\40\0\1\1\35\0\1\1\14\0\1\1\4\0\1\1"+
    "\7\0\1\1\33\0\1\1\13\0\1\1\3\0\1\1"+
    "\1\0\1\1\14\0\1\1\2\0\1\1\35\0\1\1"+
    "\3\0\6\1\15\0\1\1\1\0\1\1\10\0\1\1"+
    "\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
            // fall through
          case 22: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 23: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(48, 63, 159));
            }
            // fall through
          case 24: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(169, 155, 179));
            }
            // fall through
          case 25: break;
          case 5:
            { return textColor(yychar, yylength(), Color.red );
            }
            // fall through
          case 26: break;
          case 6:
            { return textColor(yychar, yylength(), Color.green);
            }
            // fall through
          case 27: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(135, 129, 147));
            }
            // fall through
          case 28: break;
          case 8:
            { return textColor(yychar, yylength(), Color.white);
            }
            // fall through
          case 29: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(146,146,146));
            }
            // fall through
          case 30: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(121, 107, 255));
            }
            // fall through
          case 31: break;
          case 11:
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 32: break;
          case 12:
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 33: break;
          case 13:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return textColor(yychar, yylength(), new Color(0, 191, 255));
            }
            // fall through
          case 34: break;
          case 14:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 35: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(255, 64, 146));
            }
            // fall through
          case 36: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(148, 58, 173));
            }
            // fall through
          case 37: break;
          case 17:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 38: break;
          case 18:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 39: break;
          case 19:
            { return textColor(yychar, yylength(), new Color(224, 195, 12));
            }
            // fall through
          case 40: break;
          case 20:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 41: break;
          case 21:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
