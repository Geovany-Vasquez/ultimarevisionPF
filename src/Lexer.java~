// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\2\0\1\6\2\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\1\0\1\15\1\16\1\17\5\20"+
    "\3\21\1\0\1\22\1\23\1\24\1\25\2\0\1\26"+
    "\1\27\1\30\1\31\1\32\11\26\1\33\1\34\3\26"+
    "\1\35\4\26\1\36\1\26\4\0\1\26\1\0\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\26\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\26\1\67\1\70\1\71\7\0\1\3\73\0\1\26"+
    "\7\0\1\26\3\0\1\26\3\0\1\26\1\0\1\26"+
    "\6\0\1\26\1\0\1\26\4\0\1\26\7\0\1\26"+
    "\3\0\1\26\3\0\1\26\1\0\1\26\6\0\1\26"+
    "\1\0\1\26\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\2\1\1\1\3\1\4"+
    "\1\5\1\6\1\1\2\7\1\10\1\1\1\11\30\12"+
    "\1\13\1\14\3\0\1\2\1\0\2\15\47\0\1\16"+
    "\11\0\1\17\12\0\1\20\1\21\33\0\1\22\3\0"+
    "\1\23\53\0\1\24\12\0\1\25\11\0\1\26\42\0"+
    "\1\2\16\0\1\27\11\0\1\30\13\0\1\31\4\0"+
    "\1\31\11\0\1\32\1\0\1\31\4\0\1\25\3\0"+
    "\1\33\4\0\1\34\21\0\1\35\17\0\1\36\15\0"+
    "\1\37\3\0\1\24\1\0\1\40\16\0\1\25\2\0"+
    "\1\41\1\16\44\0\1\42\3\0\6\43\26\0\1\44"+
    "\1\0\1\31\20\0\1\45\1\46\1\47\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\72\0\164\0\256\0\72\0\72"+
    "\0\72\0\72\0\350\0\u0122\0\u015c\0\72\0\u0196\0\72"+
    "\0\72\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\72\0\72\0\u0244\0\u0706\0\u0740\0\u077a\0\u07b4\0\72"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\72\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u0536\0\72\0\72\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\72\0\u1b6a\0\u1ba4\0\u1bde\0\72\0\u1c18"+
    "\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\72\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\72\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\72"+
    "\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba"+
    "\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a"+
    "\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a"+
    "\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a"+
    "\0\u3164\0\u319e\0\u18b2\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0"+
    "\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490"+
    "\0\u34ca\0\72\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\72\0\u370e\0\u3748\0\u3782\0\u37bc"+
    "\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c"+
    "\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\72\0\u3aae\0\u3ae8\0\u3b22"+
    "\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\72\0\u3cb8"+
    "\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88"+
    "\0\u3ec2\0\72\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\72\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\72\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a"+
    "\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea"+
    "\0\72\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880"+
    "\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc\0\72\0\u4a16"+
    "\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\72\0\u4b38\0\u4b72\0\u4bac"+
    "\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c"+
    "\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\72\0\72"+
    "\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8"+
    "\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278"+
    "\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448"+
    "\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618"+
    "\0\u5652\0\u568c\0\u56c6\0\u5700\0\72\0\u573a\0\u5774\0\u57ae"+
    "\0\72\0\u0244\0\u0d24\0\u2358\0\u37bc\0\u4724\0\u57e8\0\u5822"+
    "\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2"+
    "\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2"+
    "\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\72\0\u5ce4\0\u18b2\0\u5d1e"+
    "\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee"+
    "\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\72"+
    "\0\72\0\72\0\u60be\0\u60f8\0\u6132\0\u616c\0\u61a6\0\u61e0"+
    "\0\u621a\0\u6254\0\u628e\0\u62c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\2\1\13\1\14\3\15\1\16"+
    "\1\17\1\20\1\2\1\21\1\22\1\21\1\23\1\21"+
    "\1\24\3\21\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\21\1\33\1\34\1\21\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\21\1\46\1\47"+
    "\1\50\1\21\1\51\1\7\1\52\33\4\1\53\40\4"+
    "\1\3\30\4\1\53\54\4\4\54\4\4\41\54\1\4"+
    "\1\54\13\4\1\55\2\4\1\56\5\4\1\57\7\4"+
    "\1\53\54\4\1\60\3\61\11\4\1\53\54\4\4\15"+
    "\11\4\1\53\53\4\1\62\15\4\1\53\3\4\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\4\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\4"+
    "\1\102\1\103\1\104\1\105\1\106\40\4\1\53\23\4"+
    "\1\107\134\4\1\110\2\4\1\53\71\4\1\53\4\4"+
    "\1\111\1\112\7\4\1\113\3\4\1\114\1\4\1\115"+
    "\45\4\1\53\3\4\1\116\5\4\1\117\1\4\1\120"+
    "\1\4\1\121\2\4\1\122\50\4\1\53\7\4\1\123"+
    "\2\4\1\124\2\4\1\125\2\4\1\126\50\4\1\53"+
    "\3\4\1\127\7\4\1\130\4\4\1\131\50\4\1\53"+
    "\15\4\1\132\53\4\1\53\20\4\1\133\2\4\1\134"+
    "\45\4\1\53\7\4\1\135\1\4\1\136\11\4\1\137"+
    "\1\140\1\141\43\4\1\53\6\4\1\142\1\4\1\143"+
    "\13\4\1\144\44\4\1\53\3\4\1\145\7\4\1\146"+
    "\55\4\1\53\3\4\1\147\3\4\1\150\16\4\1\151"+
    "\42\4\1\53\3\4\1\152\14\4\1\153\5\4\1\154"+
    "\42\4\1\53\15\4\1\155\25\4\1\156\25\4\1\53"+
    "\43\4\1\157\25\4\1\53\71\4\1\53\7\4\1\160"+
    "\10\4\1\161\50\4\1\53\5\4\1\162\13\4\1\163"+
    "\3\4\1\164\43\4\1\53\3\4\1\165\7\4\1\166"+
    "\7\4\1\167\6\4\1\170\36\4\1\53\3\4\1\171"+
    "\11\4\1\172\6\4\1\140\44\4\1\53\12\4\1\173"+
    "\56\4\1\53\16\4\1\174\35\4\4\175\4\4\5\175"+
    "\1\176\33\175\1\4\1\175\1\4\12\177\1\200\20\177"+
    "\1\201\36\177\2\56\1\3\1\56\1\5\65\56\33\4"+
    "\1\53\12\4\1\202\41\4\4\61\11\4\1\53\71\4"+
    "\1\53\3\4\1\203\1\204\1\205\1\206\1\4\1\70"+
    "\1\4\1\207\2\4\1\74\1\210\1\76\1\77\1\100"+
    "\1\101\1\4\1\211\1\212\1\77\34\4\1\213\5\4"+
    "\1\53\4\4\1\106\1\4\1\214\14\4\1\215\1\216"+
    "\36\4\1\217\5\4\1\53\15\4\1\220\5\4\1\101"+
    "\45\4\1\53\3\4\1\221\7\4\1\222\4\4\1\223"+
    "\50\4\1\53\3\4\1\224\2\4\1\225\1\226\1\227"+
    "\2\4\1\230\1\4\1\225\7\4\1\225\43\4\1\53"+
    "\16\4\1\101\52\4\1\53\13\4\1\231\4\4\1\232"+
    "\33\4\4\233\11\4\1\53\7\4\1\234\13\4\1\225"+
    "\37\4\1\217\5\4\1\53\17\4\1\235\51\4\1\53"+
    "\4\4\1\236\64\4\1\53\13\4\1\225\55\4\1\53"+
    "\3\4\1\237\65\4\1\53\3\4\1\240\65\4\1\53"+
    "\15\4\1\225\45\4\1\156\5\4\1\53\23\4\1\241"+
    "\37\4\1\217\5\4\1\53\63\4\1\217\5\4\1\53"+
    "\3\4\1\242\3\4\1\243\6\4\1\244\2\4\1\245"+
    "\3\4\1\246\1\247\42\4\1\53\3\4\1\250\1\251"+
    "\1\4\1\252\1\4\1\253\1\4\1\254\1\255\7\4"+
    "\1\252\37\4\1\217\5\4\1\53\15\4\1\225\53\4"+
    "\1\53\3\4\1\256\65\4\1\53\4\4\1\256\64\4"+
    "\1\53\7\4\1\257\61\4\1\53\1\4\1\260\67\4"+
    "\1\53\4\4\1\261\64\4\1\53\5\4\1\262\15\4"+
    "\1\263\45\4\1\53\13\4\1\264\1\4\1\265\53\4"+
    "\1\53\21\4\1\266\47\4\1\53\25\4\1\267\43\4"+
    "\1\53\24\4\1\270\44\4\1\53\5\4\1\271\16\4"+
    "\1\272\44\4\1\53\11\4\1\273\57\4\1\53\13\4"+
    "\1\274\4\4\1\275\50\4\1\53\6\4\1\276\14\4"+
    "\1\277\45\4\1\53\15\4\1\300\1\4\1\301\51\4"+
    "\1\53\3\4\1\302\65\4\1\53\3\4\1\303\65\4"+
    "\1\53\15\4\1\304\53\4\1\53\25\4\1\305\43\4"+
    "\1\53\23\4\1\306\3\4\1\155\41\4\1\53\30\4"+
    "\1\307\40\4\1\53\24\4\1\310\44\4\1\53\17\4"+
    "\1\311\51\4\1\53\3\4\1\312\65\4\1\53\3\4"+
    "\1\313\65\4\1\53\23\4\1\314\45\4\1\53\7\4"+
    "\1\315\61\4\1\53\21\4\1\316\47\4\1\53\16\4"+
    "\1\317\43\4\1\320\6\4\1\53\71\4\1\53\13\4"+
    "\1\321\55\4\1\53\17\4\1\322\51\4\1\53\17\4"+
    "\1\323\4\4\1\324\44\4\1\53\23\4\1\325\45\4"+
    "\1\53\17\4\1\326\5\4\1\327\43\4\1\53\15\4"+
    "\1\330\53\4\1\53\16\4\1\331\52\4\1\53\4\4"+
    "\1\332\2\4\1\333\1\334\17\4\1\335\40\4\1\53"+
    "\16\4\1\336\52\4\1\53\15\4\1\337\11\4\1\340"+
    "\41\4\1\53\30\4\1\341\40\4\1\53\20\4\1\342"+
    "\2\4\1\343\45\4\1\53\3\4\1\344\65\4\1\53"+
    "\3\4\1\345\17\4\1\346\6\4\1\347\36\4\1\53"+
    "\23\4\1\350\45\4\1\53\25\4\1\351\43\4\1\53"+
    "\3\4\1\352\65\4\1\53\21\4\1\353\47\4\1\53"+
    "\15\4\1\354\53\4\1\53\13\4\1\355\55\4\1\53"+
    "\13\4\1\356\55\4\1\53\21\4\1\273\32\4\4\357"+
    "\4\4\5\357\1\360\33\357\1\4\1\357\17\4\4\357"+
    "\4\4\2\357\1\361\2\357\1\360\33\357\1\4\1\357"+
    "\1\4\12\177\1\362\20\177\1\201\50\177\1\362\2\177"+
    "\1\363\15\177\1\201\50\177\1\362\15\177\1\364\2\177"+
    "\1\201\36\177\16\4\4\233\11\4\1\53\63\4\1\213"+
    "\5\4\1\53\6\4\1\214\14\4\1\215\1\216\44\4"+
    "\1\53\15\4\1\220\53\4\1\53\3\4\1\221\14\4"+
    "\1\365\50\4\1\53\6\4\1\225\4\4\1\230\1\4"+
    "\1\225\7\4\1\225\27\4\2\366\12\4\1\53\7\4"+
    "\1\234\13\4\1\225\45\4\1\53\3\4\1\367\65\4"+
    "\1\53\7\4\1\243\16\4\1\247\42\4\1\53\3\4"+
    "\1\250\1\251\1\4\1\252\1\4\1\253\1\4\1\254"+
    "\10\4\1\252\45\4\1\53\6\4\1\370\62\4\1\53"+
    "\25\4\1\371\43\4\1\53\13\4\1\372\55\4\1\53"+
    "\20\4\1\373\50\4\1\53\21\4\1\374\47\4\1\53"+
    "\25\4\1\375\43\4\1\53\6\4\1\375\6\4\1\376"+
    "\53\4\1\53\25\4\1\377\35\4\1\156\5\4\1\53"+
    "\71\4\1\53\15\4\1\101\53\4\1\53\17\4\1\101"+
    "\51\4\1\53\27\4\1\225\41\4\1\53\11\4\1\u0100"+
    "\57\4\1\53\20\4\1\u0101\42\4\1\u0102\5\4\1\53"+
    "\71\4\1\53\3\4\1\u0103\65\4\1\53\24\4\1\101"+
    "\44\4\1\53\6\4\1\101\62\4\1\53\13\4\1\u0104"+
    "\7\4\1\u0105\45\4\1\53\27\4\1\366\41\4\1\53"+
    "\7\4\1\225\61\4\1\53\16\4\1\u0106\52\4\1\53"+
    "\5\4\1\u0107\63\4\1\53\3\4\1\u0108\65\4\1\53"+
    "\3\4\1\227\65\4\1\53\23\4\1\u0109\45\4\1\53"+
    "\4\4\1\101\14\4\1\101\47\4\1\53\4\4\1\u010a"+
    "\64\4\1\53\20\4\1\u010b\42\4\1\u010c\5\4\1\53"+
    "\71\4\1\53\20\4\1\u010d\42\4\1\u010c\5\4\1\53"+
    "\7\4\1\u010e\61\4\1\53\16\4\1\375\52\4\1\53"+
    "\23\4\1\101\45\4\1\53\3\4\1\u010f\65\4\1\53"+
    "\2\4\1\u0110\66\4\1\53\23\4\1\u010c\45\4\1\53"+
    "\7\4\1\u0111\61\4\1\53\20\4\1\u0112\50\4\1\53"+
    "\11\4\1\u0113\5\4\1\u0114\51\4\1\53\20\4\1\u0115"+
    "\50\4\1\53\15\4\1\u0116\53\4\1\53\13\4\1\u0117"+
    "\55\4\1\53\7\4\1\u0118\61\4\1\53\20\4\1\u0119"+
    "\50\4\1\53\20\4\1\u011a\50\4\1\53\17\4\1\u011b"+
    "\51\4\1\53\5\4\1\u011c\63\4\1\53\32\4\1\u011d"+
    "\36\4\1\53\6\4\1\u011e\62\4\1\53\15\4\1\u011f"+
    "\53\4\1\53\25\4\1\u0120\43\4\1\53\23\4\1\u0121"+
    "\45\4\1\53\24\4\1\u0122\16\4\1\u010c\25\4\1\53"+
    "\20\4\1\u0123\3\4\1\u0124\44\4\1\53\3\4\1\u0125"+
    "\65\4\1\53\17\4\1\u0126\51\4\1\53\7\4\1\u0127"+
    "\61\4\1\53\25\4\1\273\43\4\1\53\16\4\1\u0128"+
    "\52\4\1\53\6\4\1\u0129\62\4\1\53\20\4\1\u012a"+
    "\50\4\1\53\10\4\1\u012b\60\4\1\53\3\4\1\u012c"+
    "\65\4\1\53\15\4\1\u011d\53\4\1\53\17\4\1\u012d"+
    "\51\4\1\53\11\4\1\u012e\57\4\1\53\14\4\1\u011d"+
    "\54\4\1\53\25\4\1\u012f\43\4\1\53\22\4\1\u0130"+
    "\46\4\1\53\26\4\1\273\42\4\1\53\3\4\1\u011d"+
    "\65\4\1\53\25\4\1\u0131\43\4\1\53\7\4\1\u0132"+
    "\61\4\1\53\23\4\1\273\45\4\1\53\16\4\1\u0133"+
    "\52\4\1\53\23\4\1\u0134\45\4\1\53\23\4\1\u0135"+
    "\45\4\1\53\7\4\1\u0136\52\4\1\u0137\6\4\1\53"+
    "\71\4\1\53\7\4\1\u0138\61\4\1\53\24\4\1\u0124"+
    "\44\4\1\53\21\4\1\u0139\47\4\1\53\20\4\1\u013a"+
    "\50\4\1\53\5\4\1\u0120\63\4\1\53\23\4\1\u013b"+
    "\45\4\1\53\13\4\1\u013c\55\4\1\53\15\4\1\u013d"+
    "\53\4\1\53\11\4\1\u013e\57\4\1\53\15\4\1\u013f"+
    "\53\4\1\53\17\4\1\u0140\51\4\1\53\7\4\1\u0141"+
    "\61\4\1\53\13\4\1\u0142\55\4\1\53\17\4\1\u0114"+
    "\51\4\1\53\15\4\1\u0143\36\4\4\u0144\4\4\5\u0144"+
    "\1\u0145\33\u0144\1\4\1\u0144\17\4\4\u0144\4\4\2\u0144"+
    "\1\u0146\2\u0144\1\u0145\33\u0144\1\4\1\u0144\17\4\4\u0144"+
    "\4\4\5\u0144\1\u0145\1\u0144\1\u0147\31\u0144\1\4\1\u0144"+
    "\1\4\12\177\1\362\2\177\1\3\15\177\1\201\50\177"+
    "\1\362\20\177\1\201\1\177\1\u0148\34\177\33\4\1\53"+
    "\15\4\1\376\45\4\1\u0149\5\4\1\53\71\4\1\53"+
    "\13\4\1\u0104\55\4\1\53\23\4\1\u014a\45\4\1\53"+
    "\13\4\1\u014b\55\4\1\53\6\4\1\u014c\62\4\1\53"+
    "\5\4\1\u014d\63\4\1\53\25\4\1\u014e\43\4\1\53"+
    "\7\4\1\101\53\4\1\u010c\5\4\1\53\11\4\1\u014f"+
    "\57\4\1\53\3\4\1\101\65\4\1\53\5\4\1\u0150"+
    "\20\4\1\u0151\42\4\1\53\25\4\1\u0152\43\4\1\53"+
    "\6\4\1\u0152\62\4\1\53\17\4\1\225\51\4\1\53"+
    "\14\4\1\101\54\4\1\53\21\4\1\101\47\4\1\53"+
    "\25\4\1\u0153\43\4\1\53\15\4\1\226\53\4\1\53"+
    "\20\4\1\u0154\50\4\1\53\15\4\1\u0155\53\4\1\53"+
    "\6\4\1\u0156\62\4\1\53\20\4\1\u0157\50\4\1\53"+
    "\3\4\1\u0158\65\4\1\53\14\4\1\u0159\54\4\1\53"+
    "\1\u015a\70\4\1\53\24\4\1\u015b\44\4\1\53\17\4"+
    "\1\u015c\51\4\1\53\17\4\1\u0132\51\4\1\53\14\4"+
    "\1\u0132\54\4\1\53\30\4\1\u015d\40\4\1\53\7\4"+
    "\1\311\61\4\1\53\5\4\1\u015e\63\4\1\53\10\4"+
    "\1\u015f\60\4\1\53\15\4\1\u0160\53\4\1\53\26\4"+
    "\1\u0161\42\4\1\53\14\4\1\273\54\4\1\53\14\4"+
    "\1\u0162\54\4\1\53\7\4\1\u0163\61\4\1\53\21\4"+
    "\1\u0164\2\4\1\u0165\44\4\1\53\7\4\1\332\61\4"+
    "\1\53\24\4\1\u0166\44\4\1\53\24\4\1\306\44\4"+
    "\1\53\23\4\1\u0167\45\4\1\53\21\4\1\u0168\30\4"+
    "\1\u0169\16\4\1\53\71\4\1\53\15\4\1\u016a\53\4"+
    "\1\53\7\4\1\u016b\61\4\1\53\7\4\1\u016c\61\4"+
    "\1\53\26\4\1\174\33\4\1\u016d\6\4\1\53\15\4"+
    "\1\u016e\53\4\1\53\5\4\1\331\63\4\1\53\6\4"+
    "\1\u016f\62\4\1\53\26\4\1\u0170\42\4\1\53\13\4"+
    "\1\u0171\55\4\1\53\26\4\1\u0172\42\4\1\53\13\4"+
    "\1\u0173\55\4\1\53\4\4\1\u0174\64\4\1\53\3\4"+
    "\1\u0175\65\4\1\53\3\4\1\u0176\65\4\1\53\23\4"+
    "\1\u0177\45\4\1\53\23\4\1\u0178\45\4\1\53\7\4"+
    "\1\u010c\61\4\1\53\15\4\1\u0179\53\4\1\53\25\4"+
    "\1\u017a\43\4\1\53\14\4\1\u017b\54\4\1\53\7\4"+
    "\1\u017c\61\4\1\53\7\4\1\u017d\61\4\1\53\7\4"+
    "\1\306\61\4\1\53\24\4\1\u017e\35\4\1\u017f\6\4"+
    "\1\53\71\4\1\53\11\4\1\u0113\57\4\1\53\7\4"+
    "\1\u0180\44\4\4\u0181\4\4\5\u0181\1\u0182\33\u0181\1\4"+
    "\1\u0181\17\4\4\u0181\4\4\2\u0181\1\u0183\2\u0181\1\u0182"+
    "\33\u0181\1\4\1\u0181\17\4\4\u0181\4\4\5\u0181\1\u0182"+
    "\1\u0181\1\u0184\31\u0181\1\4\1\u0181\17\4\4\u0181\4\4"+
    "\5\u0181\1\u0182\2\u0181\1\u0185\30\u0181\1\4\1\u0181\1\4"+
    "\12\177\1\362\20\177\1\201\2\177\1\u0186\33\177\33\4"+
    "\1\53\7\4\1\u0187\61\4\1\53\5\4\1\u0188\63\4"+
    "\1\53\7\4\1\366\61\4\1\53\14\4\1\u0189\54\4"+
    "\1\53\13\4\1\u018a\55\4\1\53\23\4\1\u018b\45\4"+
    "\1\53\3\4\1\u018c\65\4\1\53\23\4\1\241\45\4"+
    "\1\53\7\4\1\u018d\61\4\1\53\13\4\1\u018e\55\4"+
    "\1\53\17\4\1\u018f\51\4\1\53\7\4\1\252\61\4"+
    "\1\53\32\4\1\252\36\4\1\53\25\4\1\252\43\4"+
    "\1\53\6\4\1\252\61\4\1\u011d\1\53\71\4\1\53"+
    "\24\4\1\u0190\44\4\1\53\32\4\1\u0191\36\4\1\53"+
    "\25\4\1\u0192\43\4\1\53\15\4\1\u0193\53\4\1\53"+
    "\20\4\1\133\50\4\1\53\20\4\1\u0163\50\4\1\53"+
    "\17\4\1\u0194\51\4\1\53\22\4\1\u0195\46\4\1\53"+
    "\23\4\1\u0132\45\4\1\53\3\4\1\u0196\65\4\1\53"+
    "\21\4\1\u0197\47\4\1\53\7\4\1\u0198\61\4\1\53"+
    "\3\4\1\u0199\65\4\1\53\24\4\1\u019a\44\4\1\53"+
    "\20\4\1\u019b\50\4\1\53\4\4\1\u019c\17\4\1\u0116"+
    "\44\4\1\53\23\4\1\u019d\45\4\1\53\3\4\1\u019e"+
    "\65\4\1\53\7\4\1\u019f\61\4\1\53\3\4\1\u01a0"+
    "\65\4\1\53\17\4\1\120\51\4\1\53\7\4\1\u017b"+
    "\61\4\1\53\5\4\1\u01a1\63\4\1\53\7\4\1\u0194"+
    "\61\4\1\53\16\4\1\u01a2\52\4\1\53\21\4\1\u0132"+
    "\47\4\1\53\20\4\1\u0167\50\4\1\53\24\4\1\u01a3"+
    "\44\4\1\53\15\4\1\u01a4\44\4\1\u01a5\6\4\1\53"+
    "\71\4\1\53\7\4\1\273\45\4\1\u01a6\13\4\1\53"+
    "\71\4\1\53\25\4\1\u01a7\43\4\1\53\15\4\1\u01a8"+
    "\36\4\4\u01a9\4\4\5\u01a9\1\u01aa\33\u01a9\1\4\1\u01a9"+
    "\17\4\4\u01a9\4\4\2\u01a9\1\u01ab\2\u01a9\1\u01aa\33\u01a9"+
    "\1\4\1\u01a9\17\4\4\u01a9\4\4\5\u01a9\1\u01aa\1\u01a9"+
    "\1\u01ac\31\u01a9\1\4\1\u01a9\17\4\4\u01a9\4\4\5\u01a9"+
    "\1\u01aa\2\u01a9\1\u01ad\30\u01a9\1\4\1\u01a9\17\4\4\u01a9"+
    "\4\4\5\u01a9\1\u01aa\1\u01ae\32\u01a9\1\4\1\u01a9\1\4"+
    "\12\177\1\362\20\177\1\201\1\u01af\35\177\33\4\1\53"+
    "\24\4\1\u01b0\44\4\1\53\15\4\1\u014c\53\4\1\53"+
    "\22\4\1\u01b1\46\4\1\53\20\4\1\u01b2\50\4\1\53"+
    "\20\4\1\u01b3\50\4\1\53\21\4\1\u01b4\47\4\1\53"+
    "\23\4\1\366\45\4\1\53\20\4\1\u01b5\50\4\1\53"+
    "\11\4\1\101\57\4\1\53\14\4\1\u01b6\54\4\1\53"+
    "\16\4\1\273\52\4\1\53\23\4\1\u01b7\45\4\1\53"+
    "\7\4\1\u01b8\61\4\1\53\6\4\1\273\62\4\1\53"+
    "\26\4\1\u01b9\42\4\1\53\6\4\1\u01ba\62\4\1\53"+
    "\3\4\1\u01bb\65\4\1\53\25\4\1\u0132\43\4\1\53"+
    "\17\4\1\u010c\51\4\1\53\12\4\1\u01bc\56\4\1\53"+
    "\3\4\1\u01bd\65\4\1\53\20\4\1\u01be\50\4\1\53"+
    "\24\4\1\u010c\44\4\1\53\17\4\1\u01bf\51\4\1\53"+
    "\31\4\1\273\37\4\1\53\11\4\1\331\57\4\1\53"+
    "\20\4\1\u01c0\50\4\1\53\7\4\1\u01c1\61\4\1\53"+
    "\7\4\1\u01c2\61\4\1\53\13\4\1\u01c3\55\4\1\53"+
    "\24\4\1\u01c4\35\4\1\u01c5\6\4\1\53\71\4\1\53"+
    "\3\4\1\u01c6\32\4\12\177\1\362\17\177\1\u01c7\1\201"+
    "\36\177\33\4\1\53\24\4\1\366\44\4\1\53\26\4"+
    "\1\u01c8\42\4\1\53\17\4\1\252\51\4\1\53\26\4"+
    "\1\u01c9\42\4\1\53\25\4\1\u01ca\43\4\1\53\17\4"+
    "\1\366\51\4\1\53\7\4\1\u01cb\61\4\1\53\3\4"+
    "\1\u01cc\37\4\1\u0149\25\4\1\53\71\4\1\53\20\4"+
    "\1\u01cd\50\4\1\53\6\4\1\u01a4\62\4\1\53\5\4"+
    "\1\u01a4\63\4\1\53\3\4\1\u01ce\65\4\1\53\6\4"+
    "\1\u01cf\62\4\1\53\23\4\1\277\45\4\1\53\11\4"+
    "\1\u01d0\57\4\1\53\15\4\1\273\53\4\1\53\24\4"+
    "\1\273\44\4\1\53\6\4\1\u01d1\62\4\1\53\17\4"+
    "\1\u01d2\51\4\1\53\5\4\1\u01d3\63\4\1\53\25\4"+
    "\1\u013f\43\4\1\53\20\4\1\u01d4\50\4\1\53\21\4"+
    "\1\252\47\4\1\53\13\4\1\u01d5\55\4\1\53\32\4"+
    "\1\306\36\4\1\53\17\4\1\u01d6\51\4\1\53\25\4"+
    "\1\u01d7\43\4\1\53\23\4\1\u013f\36\4\1\u01d8\6\4"+
    "\1\53\62\4\1\u01d9\6\4\1\53\62\4\1\u01da\6\4"+
    "\1\53\71\4\1\53\11\4\1\u0132\57\4\1\53\23\4"+
    "\1\u01db\45\4\1\53\25\4\1\241\43\4\1\53\20\4"+
    "\1\u0104\50\4\1\53\24\4\1\u01dc\44\4\1\53\7\4"+
    "\1\155\61\4\1\53\13\4\1\u01dd\55\4\1\53\21\4"+
    "\1\u01de\47\4\1\53\21\4\1\u01df\47\4\1\53\3\4"+
    "\1\u01e0\65\4\1\53\25\4\1\u011d\43\4\1\53\23\4"+
    "\1\u01e1\45\4\1\53\7\4\1\u01e2\61\4\1\53\17\4"+
    "\1\u01e3\51\4\1\53\5\4\1\u01e4\63\4\1\53\32\4"+
    "\1\u0132\3\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25346];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\46\1\3\0\1\1\1\0\2\1"+
    "\47\0\1\1\11\0\1\1\12\0\2\1\33\0\1\1"+
    "\3\0\1\1\53\0\1\1\12\0\1\1\11\0\1\1"+
    "\42\0\1\1\16\0\1\1\11\0\1\1\13\0\1\1"+
    "\4\0\1\1\11\0\1\1\1\0\1\1\4\0\1\1"+
    "\3\0\1\1\4\0\1\1\21\0\1\1\17\0\1\1"+
    "\15\0\1\1\3\0\1\1\1\0\1\1\16\0\1\1"+
    "\2\0\2\1\44\0\1\1\3\0\6\1\26\0\1\1"+
    "\1\0\1\1\20\0\3\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[484];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 41: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 4:
            { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 5:
            { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 6:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 7:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 8:
            { return token(yytext(), "PUNTO_COMA", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 9:
            { return token(yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 10:
            { return token(yytext(), "TXT", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 11:
            { return token(yytext(), "LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 12:
            { return token(yytext(), "LLAVE_c", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 13:
            { return token(yytext(), "Error", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 14:
            { return token(yytext(), "WHILE", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 15:
            { return token(yytext(), "IF", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 16:
            { return token(yytext(), "Agrupa", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 17:
            { return token(yytext(), "texte", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 18:
            { return token(yytext(), "Hiperv", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 19:
            { return token(yytext(), "EtiquetasT", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 20:
            { return token(yytext(), "EtiquetaO", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 21:
            { return token(yytext(), "Atributos", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 22:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return textColor(yychar, yylength(), new Color(0, 191, 255));
            }
            // fall through
          case 61: break;
          case 23:
            { return token(yytext(), "ETIQUETA", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 24:
            { return token(yytext(), "tabla", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 25:
            { return token(yytext(), "Estructura", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 26:
            { return token(yytext(), "else", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 27:
            { return token(yytext(), "AtributosO", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 28:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return token(yytext(), "R", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 29:
            { return token(yytext(), "Etiqueta", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 30:
            { return token(yytext(), "BREAK", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 31:
            { return token(yytext(), "TIPO_DATO" , yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return token(yytext(), "referenci", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 33:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return token(yytext(), "Escrit", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 34:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return token(yytext(), "Empe", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 35:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 36:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return token(yytext(), "Targ", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return token(yytext(), "Descarga", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 38:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return token(yytext(), "Refer", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 39:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return token(yytext(), "Rever", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

    private Token textColor(long yychar, int yylength, Color color) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


}
