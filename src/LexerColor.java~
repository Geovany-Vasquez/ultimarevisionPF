// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\2\0\1\6\2\0\1\7\1\0\2\10\1\11\1\0"+
    "\1\12\1\13\1\0\1\14\1\15\1\16\5\17\3\20"+
    "\1\0\1\12\1\21\1\22\1\23\2\0\1\24\1\25"+
    "\1\26\1\27\1\30\11\24\1\31\1\32\3\24\1\33"+
    "\4\24\1\34\1\24\4\0\1\24\1\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\24"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\24"+
    "\1\10\1\65\1\10\7\0\1\3\73\0\1\24\7\0"+
    "\1\24\3\0\1\24\3\0\1\24\1\0\1\24\6\0"+
    "\1\24\1\0\1\24\4\0\1\24\7\0\1\24\3\0"+
    "\1\24\3\0\1\24\1\0\1\24\6\0\1\24\1\0"+
    "\1\24\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\2\1\1\1\3\1\4"+
    "\1\5\1\1\2\6\1\1\27\7\3\0\1\10\50\0"+
    "\1\11\23\0\1\12\22\0\2\10\74\0\1\13\11\0"+
    "\1\14\40\0\1\10\35\0\1\12\14\0\1\12\4\0"+
    "\1\13\7\0\1\15\33\0\1\16\13\0\1\17\3\0"+
    "\1\12\1\0\1\20\14\0\1\13\2\0\1\11\35\0"+
    "\1\21\3\0\6\22\15\0\1\23\1\0\1\12\10\0"+
    "\1\24\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\66\0\154\0\242\0\66\0\66"+
    "\0\66\0\330\0\66\0\u010e\0\u0144\0\66\0\u017a\0\u01b0"+
    "\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u01e6\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u04a4\0\66\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\66"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\66\0\u23dc\0\u2412"+
    "\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\66"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c"+
    "\0\u165c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76"+
    "\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126"+
    "\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6"+
    "\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486"+
    "\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636"+
    "\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6"+
    "\0\66\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960"+
    "\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0"+
    "\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\66\0\u3dce\0\u3e04\0\u3e3a"+
    "\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea"+
    "\0\66\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\66\0\u412e"+
    "\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de"+
    "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\66\0\u4458"+
    "\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608"+
    "\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8"+
    "\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968"+
    "\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\66\0\u4a76\0\u4aac\0\u4ae2"+
    "\0\66\0\u01e6\0\u0b9a\0\u1f6e\0\u3126\0\u3dce\0\u4b18\0\u4b4e"+
    "\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe"+
    "\0\u4d34\0\u4d6a\0\u4da0\0\66\0\u4dd6\0\u165c\0\u4e0c\0\u4e42"+
    "\0\u4e78\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\66\0\u4fbc"+
    "\0\u4ff2\0\u5028\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\2\1\11\1\2\1\12\1\13\3\14\1\15\1\10"+
    "\1\2\1\16\1\17\1\16\1\20\1\16\1\21\3\16"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\16\1\30"+
    "\1\31\1\16\1\32\1\33\1\34\1\35\2\36\1\37"+
    "\1\40\1\41\1\16\1\42\1\43\1\44\1\16\1\7"+
    "\31\4\1\45\36\4\1\3\26\4\1\45\51\4\4\46"+
    "\3\4\42\46\11\4\1\47\2\4\1\50\4\4\1\51"+
    "\7\4\1\45\51\4\4\14\10\4\1\45\50\4\1\52"+
    "\14\4\1\45\3\4\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\4\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\4\1\72\1\73\1\74\1\75"+
    "\1\76\34\4\1\45\23\4\1\77\124\4\1\100\2\4"+
    "\1\45\65\4\1\45\4\4\1\101\1\102\7\4\1\103"+
    "\3\4\1\104\1\4\1\105\41\4\1\45\3\4\1\106"+
    "\5\4\1\107\1\4\1\110\1\4\1\111\2\4\1\112"+
    "\44\4\1\45\7\4\1\113\2\4\1\114\2\4\1\115"+
    "\2\4\1\116\44\4\1\45\3\4\1\117\7\4\1\120"+
    "\4\4\1\121\44\4\1\45\15\4\1\122\47\4\1\45"+
    "\20\4\1\123\2\4\1\124\41\4\1\45\7\4\1\125"+
    "\1\4\1\126\11\4\1\127\1\130\1\131\37\4\1\45"+
    "\6\4\1\132\1\4\1\11\13\4\1\133\40\4\1\45"+
    "\3\4\1\134\7\4\1\135\51\4\1\45\3\4\1\136"+
    "\3\4\1\137\16\4\1\140\36\4\1\45\3\4\1\141"+
    "\14\4\1\142\5\4\1\143\36\4\1\45\15\4\1\144"+
    "\23\4\1\145\23\4\1\45\65\4\1\45\7\4\1\146"+
    "\10\4\1\147\44\4\1\45\5\4\1\150\13\4\1\151"+
    "\3\4\1\152\37\4\1\45\3\4\1\153\7\4\1\154"+
    "\7\4\1\155\6\4\1\156\32\4\1\45\3\4\1\157"+
    "\11\4\1\160\6\4\1\130\40\4\1\45\12\4\1\161"+
    "\52\4\1\45\16\4\1\162\32\4\4\163\3\4\5\163"+
    "\1\164\34\163\11\165\1\166\17\165\1\167\34\165\2\50"+
    "\1\170\1\50\1\171\61\50\31\4\1\45\12\4\1\172"+
    "\52\4\1\45\3\4\1\173\1\174\1\175\1\176\1\4"+
    "\1\60\1\4\1\177\2\4\1\64\1\200\1\66\1\67"+
    "\1\70\1\71\1\4\1\201\1\202\1\67\30\4\1\145"+
    "\5\4\1\45\4\4\1\76\1\4\1\203\14\4\1\204"+
    "\1\205\32\4\1\145\5\4\1\45\15\4\1\206\5\4"+
    "\1\71\41\4\1\45\3\4\1\207\7\4\1\210\4\4"+
    "\1\211\44\4\1\45\3\4\1\212\2\4\1\71\1\67"+
    "\1\213\2\4\1\214\1\4\1\71\7\4\1\71\37\4"+
    "\1\45\16\4\1\71\46\4\1\45\13\4\1\215\4\4"+
    "\1\216\30\4\4\71\10\4\1\45\7\4\1\217\13\4"+
    "\1\71\33\4\1\145\5\4\1\45\17\4\1\220\45\4"+
    "\1\45\4\4\1\221\60\4\1\45\13\4\1\71\51\4"+
    "\1\45\3\4\1\222\61\4\1\45\3\4\1\214\61\4"+
    "\1\45\15\4\1\71\41\4\1\145\5\4\1\45\23\4"+
    "\1\223\33\4\1\145\5\4\1\45\57\4\1\145\5\4"+
    "\1\45\3\4\1\224\3\4\1\225\6\4\1\226\2\4"+
    "\1\227\3\4\1\230\1\231\36\4\1\45\3\4\1\232"+
    "\1\233\1\4\1\71\1\4\1\234\1\4\1\235\1\236"+
    "\7\4\1\71\33\4\1\145\5\4\1\45\15\4\1\71"+
    "\47\4\1\45\3\4\1\237\61\4\1\45\4\4\1\237"+
    "\60\4\1\45\7\4\1\240\55\4\1\45\1\4\1\241"+
    "\63\4\1\45\4\4\1\242\60\4\1\45\5\4\1\243"+
    "\15\4\1\244\41\4\1\45\13\4\1\245\1\4\1\246"+
    "\47\4\1\45\21\4\1\247\43\4\1\45\25\4\1\250"+
    "\37\4\1\45\24\4\1\251\40\4\1\45\5\4\1\252"+
    "\16\4\1\253\40\4\1\45\11\4\1\145\53\4\1\45"+
    "\13\4\1\254\4\4\1\255\44\4\1\45\6\4\1\256"+
    "\14\4\1\257\41\4\1\45\15\4\1\260\1\4\1\261"+
    "\45\4\1\45\3\4\1\262\61\4\1\45\3\4\1\263"+
    "\61\4\1\45\15\4\1\264\47\4\1\45\25\4\1\265"+
    "\37\4\1\45\23\4\1\266\3\4\1\144\35\4\1\45"+
    "\30\4\1\267\34\4\1\45\24\4\1\270\40\4\1\45"+
    "\17\4\1\271\45\4\1\45\3\4\1\272\61\4\1\45"+
    "\3\4\1\273\61\4\1\45\23\4\1\274\41\4\1\45"+
    "\7\4\1\275\55\4\1\45\21\4\1\276\43\4\1\45"+
    "\16\4\1\277\37\4\1\300\6\4\1\45\65\4\1\45"+
    "\13\4\1\301\51\4\1\45\17\4\1\302\45\4\1\45"+
    "\17\4\1\303\4\4\1\304\40\4\1\45\23\4\1\305"+
    "\41\4\1\45\17\4\1\306\5\4\1\307\37\4\1\45"+
    "\15\4\1\310\47\4\1\45\16\4\1\311\46\4\1\45"+
    "\4\4\1\242\2\4\1\312\1\313\17\4\1\314\34\4"+
    "\1\45\16\4\1\315\46\4\1\45\15\4\1\316\11\4"+
    "\1\317\35\4\1\45\30\4\1\320\34\4\1\45\20\4"+
    "\1\321\2\4\1\322\41\4\1\45\3\4\1\323\61\4"+
    "\1\45\3\4\1\324\17\4\1\325\6\4\1\326\32\4"+
    "\1\45\23\4\1\327\41\4\1\45\25\4\1\330\37\4"+
    "\1\45\3\4\1\331\61\4\1\45\21\4\1\332\43\4"+
    "\1\45\15\4\1\333\47\4\1\45\13\4\1\254\51\4"+
    "\1\45\13\4\1\334\51\4\1\45\21\4\1\145\27\4"+
    "\4\335\3\4\5\335\1\336\34\335\15\4\4\335\3\4"+
    "\2\335\1\337\2\335\1\336\34\335\11\165\1\340\17\165"+
    "\1\167\45\165\1\340\2\165\1\341\14\165\1\167\45\165"+
    "\1\340\14\165\1\342\2\165\1\167\34\165\2\4\1\170"+
    "\26\4\1\45\51\4\4\71\10\4\1\45\57\4\1\145"+
    "\5\4\1\45\6\4\1\203\14\4\1\204\1\205\40\4"+
    "\1\45\15\4\1\206\47\4\1\45\3\4\1\207\14\4"+
    "\1\343\44\4\1\45\6\4\1\71\4\4\1\214\1\4"+
    "\1\71\7\4\1\71\24\4\2\71\11\4\1\45\7\4"+
    "\1\217\13\4\1\71\41\4\1\45\3\4\1\344\61\4"+
    "\1\45\7\4\1\225\16\4\1\231\36\4\1\45\3\4"+
    "\1\232\1\233\1\4\1\71\1\4\1\234\1\4\1\235"+
    "\10\4\1\71\41\4\1\45\6\4\1\345\56\4\1\45"+
    "\25\4\1\346\37\4\1\45\13\4\1\347\51\4\1\45"+
    "\20\4\1\350\44\4\1\45\21\4\1\351\43\4\1\45"+
    "\25\4\1\223\37\4\1\45\6\4\1\223\6\4\1\352"+
    "\47\4\1\45\25\4\1\353\37\4\1\45\17\4\1\71"+
    "\45\4\1\45\27\4\1\71\35\4\1\45\11\4\1\354"+
    "\53\4\1\45\20\4\1\355\44\4\1\45\3\4\1\356"+
    "\61\4\1\45\24\4\1\71\40\4\1\45\6\4\1\71"+
    "\56\4\1\45\13\4\1\213\7\4\1\357\41\4\1\45"+
    "\7\4\1\71\55\4\1\45\16\4\1\360\46\4\1\45"+
    "\5\4\1\351\57\4\1\45\3\4\1\361\61\4\1\45"+
    "\3\4\1\213\61\4\1\45\23\4\1\362\41\4\1\45"+
    "\4\4\1\71\14\4\1\71\43\4\1\45\4\4\1\363"+
    "\60\4\1\45\20\4\1\364\44\4\1\45\20\4\1\365"+
    "\36\4\1\145\5\4\1\45\7\4\1\366\55\4\1\45"+
    "\16\4\1\223\46\4\1\45\23\4\1\71\41\4\1\45"+
    "\3\4\1\367\61\4\1\45\2\4\1\370\62\4\1\45"+
    "\23\4\1\145\41\4\1\45\7\4\1\371\55\4\1\45"+
    "\20\4\1\372\44\4\1\45\11\4\1\373\5\4\1\303"+
    "\45\4\1\45\20\4\1\374\44\4\1\45\15\4\1\375"+
    "\47\4\1\45\13\4\1\376\51\4\1\45\7\4\1\377"+
    "\55\4\1\45\20\4\1\u0100\44\4\1\45\20\4\1\u0101"+
    "\44\4\1\45\17\4\1\303\45\4\1\45\5\4\1\u0102"+
    "\57\4\1\45\32\4\1\145\32\4\1\45\6\4\1\u0103"+
    "\56\4\1\45\15\4\1\u0104\47\4\1\45\25\4\1\u0103"+
    "\37\4\1\45\23\4\1\u0105\41\4\1\45\24\4\1\u0106"+
    "\14\4\1\145\23\4\1\45\20\4\1\u0107\3\4\1\u0108"+
    "\40\4\1\45\3\4\1\u0109\61\4\1\45\17\4\1\u010a"+
    "\45\4\1\45\7\4\1\11\55\4\1\45\25\4\1\145"+
    "\37\4\1\45\16\4\1\u010b\46\4\1\45\6\4\1\u010c"+
    "\56\4\1\45\20\4\1\u010d\44\4\1\45\10\4\1\u010e"+
    "\54\4\1\45\3\4\1\u010f\61\4\1\45\15\4\1\145"+
    "\47\4\1\45\17\4\1\u0110\45\4\1\45\11\4\1\u0111"+
    "\53\4\1\45\14\4\1\145\50\4\1\45\25\4\1\u0112"+
    "\37\4\1\45\22\4\1\u0113\42\4\1\45\26\4\1\145"+
    "\36\4\1\45\3\4\1\145\61\4\1\45\25\4\1\u0114"+
    "\37\4\1\45\7\4\1\145\55\4\1\45\16\4\1\u0115"+
    "\46\4\1\45\23\4\1\u0116\41\4\1\45\23\4\1\u0117"+
    "\41\4\1\45\7\4\1\u0118\46\4\1\u0119\6\4\1\45"+
    "\65\4\1\45\7\4\1\u011a\55\4\1\45\24\4\1\u0108"+
    "\40\4\1\45\21\4\1\311\43\4\1\45\20\4\1\u011b"+
    "\44\4\1\45\5\4\1\u0103\57\4\1\45\23\4\1\u011c"+
    "\41\4\1\45\13\4\1\u011d\51\4\1\45\15\4\1\u011e"+
    "\47\4\1\45\11\4\1\u011f\53\4\1\45\15\4\1\u0120"+
    "\47\4\1\45\17\4\1\u0121\45\4\1\45\7\4\1\u0122"+
    "\55\4\1\45\13\4\1\u0123\51\4\1\45\15\4\1\u0124"+
    "\33\4\4\u0125\3\4\5\u0125\1\u0126\34\u0125\15\4\4\u0125"+
    "\3\4\2\u0125\1\u0127\2\u0125\1\u0126\34\u0125\15\4\4\u0125"+
    "\3\4\5\u0125\1\u0126\1\u0125\1\u0128\32\u0125\11\165\1\340"+
    "\2\165\1\170\14\165\1\167\45\165\1\340\17\165\1\167"+
    "\1\165\1\u0129\32\165\31\4\1\45\15\4\1\352\47\4"+
    "\1\45\13\4\1\213\51\4\1\45\23\4\1\u012a\41\4"+
    "\1\45\13\4\1\u012b\51\4\1\45\6\4\1\223\56\4"+
    "\1\45\5\4\1\u012c\57\4\1\45\25\4\1\u012d\31\4"+
    "\1\145\5\4\1\45\11\4\1\u012e\53\4\1\45\3\4"+
    "\1\71\61\4\1\45\5\4\1\u012f\20\4\1\u0130\36\4"+
    "\1\45\25\4\1\u0131\37\4\1\45\6\4\1\u0131\56\4"+
    "\1\45\14\4\1\71\50\4\1\45\21\4\1\71\43\4"+
    "\1\45\15\4\1\67\47\4\1\45\20\4\1\u0132\44\4"+
    "\1\45\15\4\1\223\47\4\1\45\6\4\1\u0133\56\4"+
    "\1\45\20\4\1\u0134\44\4\1\45\3\4\1\221\61\4"+
    "\1\45\14\4\1\u0135\50\4\1\45\1\u0136\64\4\1\45"+
    "\24\4\1\u0137\40\4\1\45\17\4\1\u0138\45\4\1\45"+
    "\17\4\1\145\45\4\1\45\30\4\1\u0139\34\4\1\45"+
    "\7\4\1\271\55\4\1\45\5\4\1\u013a\57\4\1\45"+
    "\10\4\1\u013b\54\4\1\45\15\4\1\u013c\47\4\1\45"+
    "\26\4\1\u013d\36\4\1\45\14\4\1\u013e\50\4\1\45"+
    "\7\4\1\242\55\4\1\45\21\4\1\u013f\2\4\1\u0140"+
    "\40\4\1\45\24\4\1\375\40\4\1\45\24\4\1\266"+
    "\40\4\1\45\23\4\1\u0141\41\4\1\45\21\4\1\u0142"+
    "\25\4\1\u0143\15\4\1\45\65\4\1\45\15\4\1\u0144"+
    "\47\4\1\45\7\4\1\u0145\55\4\1\45\7\4\1\u0146"+
    "\55\4\1\45\26\4\1\162\27\4\1\u0147\6\4\1\45"+
    "\15\4\1\u0148\47\4\1\45\5\4\1\311\57\4\1\45"+
    "\6\4\1\u0149\56\4\1\45\26\4\1\u014a\36\4\1\45"+
    "\13\4\1\u014b\51\4\1\45\26\4\1\u014c\36\4\1\45"+
    "\13\4\1\u014d\51\4\1\45\4\4\1\u014e\60\4\1\45"+
    "\3\4\1\u014f\61\4\1\45\3\4\1\162\61\4\1\45"+
    "\23\4\1\u0150\41\4\1\45\23\4\1\u0151\41\4\1\45"+
    "\15\4\1\u0152\47\4\1\45\25\4\1\u0153\37\4\1\45"+
    "\14\4\1\311\50\4\1\45\7\4\1\u0154\55\4\1\45"+
    "\7\4\1\u0155\55\4\1\45\7\4\1\266\55\4\1\45"+
    "\24\4\1\u0156\31\4\1\u0147\6\4\1\45\65\4\1\45"+
    "\11\4\1\373\53\4\1\45\7\4\1\u0157\41\4\4\u0158"+
    "\3\4\5\u0158\1\u0159\34\u0158\15\4\4\u0158\3\4\2\u0158"+
    "\1\u015a\2\u0158\1\u0159\34\u0158\15\4\4\u0158\3\4\5\u0158"+
    "\1\u0159\1\u0158\1\u015b\32\u0158\15\4\4\u0158\3\4\5\u0158"+
    "\1\u0159\2\u0158\1\u015c\31\u0158\11\165\1\340\17\165\1\167"+
    "\2\165\1\u015d\31\165\31\4\1\45\7\4\1\u015e\55\4"+
    "\1\45\5\4\1\363\57\4\1\45\14\4\1\u015f\50\4"+
    "\1\45\13\4\1\u0160\51\4\1\45\23\4\1\u0161\41\4"+
    "\1\45\3\4\1\207\61\4\1\45\23\4\1\223\41\4"+
    "\1\45\7\4\1\237\55\4\1\45\17\4\1\u0162\45\4"+
    "\1\45\32\4\1\71\32\4\1\45\25\4\1\71\36\4"+
    "\1\145\1\45\65\4\1\45\24\4\1\u0163\40\4\1\45"+
    "\32\4\1\u0164\32\4\1\45\25\4\1\u0165\37\4\1\45"+
    "\15\4\1\u0166\47\4\1\45\20\4\1\123\44\4\1\45"+
    "\20\4\1\242\44\4\1\45\17\4\1\u0167\45\4\1\45"+
    "\22\4\1\u0168\42\4\1\45\3\4\1\u0169\61\4\1\45"+
    "\21\4\1\u016a\43\4\1\45\3\4\1\373\61\4\1\45"+
    "\24\4\1\u016b\40\4\1\45\20\4\1\u016c\44\4\1\45"+
    "\4\4\1\u016d\17\4\1\375\40\4\1\45\23\4\1\u016e"+
    "\41\4\1\45\3\4\1\u016f\61\4\1\45\7\4\1\u0170"+
    "\55\4\1\45\3\4\1\u0171\61\4\1\45\17\4\1\110"+
    "\45\4\1\45\7\4\1\311\55\4\1\45\5\4\1\u0172"+
    "\57\4\1\45\7\4\1\u0167\55\4\1\45\16\4\1\u0173"+
    "\46\4\1\45\20\4\1\u0141\44\4\1\45\24\4\1\u0174"+
    "\40\4\1\45\15\4\1\u0112\40\4\1\u0175\6\4\1\45"+
    "\52\4\1\u0176\12\4\1\45\65\4\1\45\25\4\1\u0177"+
    "\37\4\1\45\15\4\1\u0178\33\4\4\u0179\3\4\5\u0179"+
    "\1\u017a\34\u0179\15\4\4\u0179\3\4\2\u0179\1\u017b\2\u0179"+
    "\1\u017a\34\u0179\15\4\4\u0179\3\4\5\u0179\1\u017a\1\u0179"+
    "\1\u017c\32\u0179\15\4\4\u0179\3\4\5\u0179\1\u017a\2\u0179"+
    "\1\u017d\31\u0179\15\4\4\u0179\3\4\5\u0179\1\u017a\1\u017e"+
    "\33\u0179\11\165\1\340\17\165\1\167\1\u017f\33\165\31\4"+
    "\1\45\24\4\1\220\40\4\1\45\22\4\1\u0180\42\4"+
    "\1\45\20\4\1\213\44\4\1\45\20\4\1\u0181\44\4"+
    "\1\45\11\4\1\71\53\4\1\45\14\4\1\u0182\50\4"+
    "\1\45\16\4\1\145\46\4\1\45\23\4\1\u0183\41\4"+
    "\1\45\7\4\1\144\55\4\1\45\6\4\1\145\56\4"+
    "\1\45\26\4\1\u0184\36\4\1\45\6\4\1\u0185\56\4"+
    "\1\45\3\4\1\u0186\61\4\1\45\12\4\1\u0187\52\4"+
    "\1\45\3\4\1\u0188\61\4\1\45\20\4\1\u0189\44\4"+
    "\1\45\24\4\1\145\40\4\1\45\17\4\1\u018a\45\4"+
    "\1\45\31\4\1\145\33\4\1\45\11\4\1\311\53\4"+
    "\1\45\20\4\1\277\44\4\1\45\7\4\1\u016e\55\4"+
    "\1\45\7\4\1\u0188\55\4\1\45\24\4\1\u018b\31\4"+
    "\1\u018c\6\4\1\45\65\4\1\45\3\4\1\u018d\30\4"+
    "\11\165\1\340\16\165\1\u018e\1\167\34\165\31\4\1\45"+
    "\26\4\1\u018f\36\4\1\45\26\4\1\360\36\4\1\45"+
    "\7\4\1\u0190\55\4\1\45\3\4\1\u0191\61\4\1\45"+
    "\20\4\1\u0192\44\4\1\45\6\4\1\u0112\56\4\1\45"+
    "\5\4\1\u0112\57\4\1\45\3\4\1\u0193\61\4\1\45"+
    "\6\4\1\u0194\56\4\1\45\23\4\1\257\41\4\1\45"+
    "\11\4\1\u0194\53\4\1\45\5\4\1\u0195\57\4\1\45"+
    "\25\4\1\u0120\37\4\1\45\20\4\1\210\44\4\1\45"+
    "\32\4\1\266\32\4\1\45\17\4\1\u0196\45\4\1\45"+
    "\25\4\1\u0166\37\4\1\45\23\4\1\u0120\32\4\1\u0197"+
    "\6\4\1\45\65\4\1\45\23\4\1\u0198\41\4\1\45"+
    "\24\4\1\u0199\40\4\1\45\13\4\1\u019a\51\4\1\45"+
    "\21\4\1\u019b\43\4\1\45\21\4\1\271\43\4\1\45"+
    "\3\4\1\u019c\61\4\1\45\23\4\1\u019d\41\4\1\45"+
    "\7\4\1\u019e\55\4\1\45\17\4\1\u019f\45\4\1\45"+
    "\5\4\1\256\26\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\40\1\3\0\1\1\50\0\1\1"+
    "\23\0\1\1\22\0\2\1\74\0\1\1\11\0\1\1"+
    "\40\0\1\1\35\0\1\1\14\0\1\1\4\0\1\1"+
    "\7\0\1\1\33\0\1\1\13\0\1\1\3\0\1\1"+
    "\1\0\1\1\14\0\1\1\2\0\1\1\35\0\1\1"+
    "\3\0\6\1\15\0\1\1\1\0\1\1\10\0\1\1"+
    "\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
            // fall through
          case 21: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 22: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(48, 63, 159));
            }
            // fall through
          case 23: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(169, 155, 179));
            }
            // fall through
          case 24: break;
          case 5:
            { return textColor(yychar, yylength(), Color.red );
            }
            // fall through
          case 25: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(135, 129, 147));
            }
            // fall through
          case 26: break;
          case 7:
            { return textColor(yychar, yylength(), Color.white);
            }
            // fall through
          case 27: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(146,146,146));
            }
            // fall through
          case 28: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(121, 107, 255));
            }
            // fall through
          case 29: break;
          case 10:
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 30: break;
          case 11:
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 31: break;
          case 12:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return textColor(yychar, yylength(), new Color(0, 191, 255));
            }
            // fall through
          case 32: break;
          case 13:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 33: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(255, 64, 146));
            }
            // fall through
          case 34: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(148, 58, 173));
            }
            // fall through
          case 35: break;
          case 16:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 36: break;
          case 17:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 37: break;
          case 18:
            { return textColor(yychar, yylength(), new Color(224, 195, 12));
            }
            // fall through
          case 38: break;
          case 19:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 39: break;
          case 20:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return textColor(yychar, yylength(), Color.blue );
            }
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
